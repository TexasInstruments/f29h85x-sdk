%%{
let 	device_common   					= system.getScript("/driverlib/.meta/device/functions_h/device_common.js");
let 	Common   						= system.getScript("/driverlib/Common.js");
var	Include							= device_common.Include;
var	VerifyXTAL						= device_common.VerifyXTAL;
var	Error_Handling						= device_common.Error_Handling;
var Boot_Cpu_2_3                        = device_common.Boot_Cpu_2_3;
var Workaround                          = device_common.Workaround;
const 	multi_core 						= device_common.multi_core;
const 	device  						= device_common.device;
%%}
`Include()`

//*****************************************************************************
//
// Check for invalid compile flags
//
//*****************************************************************************
#if ((!defined(__CPU3__)) && defined(__C29_OPTF64__))
#error "Invalid FPU Configuration for the CPU"
#endif

//*****************************************************************************
//
// Macro to call SysCtl_delay() to achieve a delay in microseconds. The macro
// will convert the desired delay in microseconds to the count value expected
// by the function. \b x is the number of microseconds to delay.
//
//*****************************************************************************
#define DEVICE_DELAY_US(x) SysCtl_delay(((((long double)(x)) / (1000000.0L /  \
                              (long double)DEVICE_SYSCLK_FREQ)) - 11.0L) / 4.0L)

//*****************************************************************************
//
// Function Prototypes
//
//*****************************************************************************
//*****************************************************************************
//
//! \addtogroup device_api
//! @{
//
//*****************************************************************************
//*****************************************************************************
//
//! Function to initialize the device. Primarily initializes system
//! control to a known state by disabling the watchdog, setting up the
//! SYSCLKOUT frequency, and enabling the clocks to the peripherals.
//!
//! \param None.
//! \return None.
//
//*****************************************************************************
extern void Device_init(void);
//*****************************************************************************
//!
//!
//! @brief Function to turn on all peripherals, enabling reads and writes to the
//! peripherals' registers.
//!
//! Note that to reduce power, unused peripherals should be disabled.
//!
//! @param None
//! @return None
//
//*****************************************************************************
extern void Device_enableAllPeripherals(void);
//*****************************************************************************
//!
//!
//! @brief Function to disable pin locks on GPIOs.
//!
//! @param None
//! @return None
//
//*****************************************************************************
extern void Device_initGPIO(void);
//*****************************************************************************
//!
//! @brief Function to enable PLL clock and enable peripheral clocks from the ClockTree
//!
//! @param None
//! @return None
//
//*****************************************************************************
extern void CLOCK_init(void);

`VerifyXTAL()`
`Boot_Cpu_2_3()`
`Workaround()`
`Error_Handling()`


