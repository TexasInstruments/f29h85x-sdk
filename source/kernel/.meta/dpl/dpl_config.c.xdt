/*
 *  Copyright (C) 2022 Texas Instruments Incorporated
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Auto generated file
 */
% var dplclock          = system.modules['/kernel/dpl/clock_c29_sdk'];
% let dplclockinstance;
% let dplclockconfig;
% let Common            = system.getScript("/driverlib/Common.js");

#include "driverlib.h"
#include "ti_dpl_config.h"

% for(let subTemplate of args) {
    % if (subTemplate.dpl_config) {
`system.getTemplate(subTemplate.dpl_config)()`
    % }
% }

/* ----------- DebugP ----------- */
__attribute__((weak)) void putchar_(char character)
{
    /* Output to CCS console */
    putchar(character);
}

void Dpl_init(void)
{
% if(dplclock != null) {
`system.getTemplate("/kernel/dpl/hwi_init.c.xdt")()`
% for(let subTemplate of args) {
    % if (subTemplate.dpl_init && subTemplate.dpl_init.match(/clock*/)) {
`system.getTemplate(subTemplate.dpl_init)()`
    % }
% }

    /* Enable interrupt handling */
    HwiP_enable();

    /* Enable interrupts within CPU */
    __builtin_c29_enable_INT();

    /* Interrupt stack pointer */
%   dplclockinstance    = dplclock.$static;
%   dplclockconfig      = dplclock.getInstanceConfig(dplclockinstance);
    HwiP_setINTSP(`dplclockconfig.intsp`);

    /* Cycle counter init */
    CycleCounterP_init(`Common.getSYSCLK()*1000000`);

    /* CPU Timer2 clock source and divider configuration */
    SysCtl_setCputimer2Clock(SYSCTL_TIMER2CLK_SOURCE_SYSCLK, SYSCTL_TIMER2CLK_DIV_1);
% }
}

void Dpl_deinit(void)
{
% if(dplclock != null) {
% for(let subTemplate of args) {
    % if (subTemplate.dpl_deinit) {
`system.getTemplate(subTemplate.dpl_deinit)()`
    % }
% }
% }
}

