%%{
    const Common  = system.getScript('/ti/security/Common.js');
    let c29x      = system.getScript('/ti/security/c29x_device.js');
    let MemConfig = system.modules['/ti/security/Memory_Config'].$static;

    function typeBanks(type)
    {
        return c29x.banks.filter(x=>x.type==type).map(x=>x.name).join('|');
    }

    function perms(mem)
    {
        let perms = '(';
        if (mem.readable)   perms += 'R';
        if (mem.writeable)  perms += 'W';
        if (mem.executable) perms += 'X';
        perms += ')';
        return perms;
    }

    function dec2hex(value, padding=0)
    {
        let hex = (value>>>0).toString(16);
        while (hex.length < padding) { hex = "0" + hex; }
        return '0x'+hex.toUpperCase();
    }

    var LDA_start = c29x.ram_memories.find(x=>x.name=="SRAM_LDAx").start
    var LPA_start = c29x.ram_memories.find(x=>x.name=="SRAM_LPAx").start
    var CPA_start = c29x.ram_memories.find(x=>x.name=="SRAM_CPAx").start
    var CDA_start = c29x.ram_memories.find(x=>x.name=="SRAM_CDAx").start
    var LDA_size  = c29x.ram_memories.find(x=>x.name=="SRAM_LDAx").size
    var LPA_size  = c29x.ram_memories.find(x=>x.name=="SRAM_LPAx").size
    var CPA_size  = c29x.ram_memories.find(x=>x.name=="SRAM_CPAx").size
    var CDA_size  = c29x.ram_memories.find(x=>x.name=="SRAM_CDAx").size
    var FRI1_start = 0x10000000
    var FRI2_start = 0x10400000

    // LDA memSplit
    var CPU1_LDA_start = LDA_start
    var CPU1_LDA_size  = LDA_size - MemConfig.CPU2RAMData*0x4000
    var CPU2_LDA_start = LDA_start + CPU1_LDA_size
    var CPU2_LDA_size  = MemConfig.CPU2RAMData*0x4000

    // LPA memSplit
    var CPU2_LPA_start = LPA_start
    var CPU2_LPA_size  = MemConfig.CPU2RAMCode*0x8000
    var CPU1_LPA_start = LPA_start + CPU2_LPA_size
    var CPU1_LPA_size  = LPA_size - MemConfig.CPU2RAMCode*0x8000

    // CPA memSplit
    var CPU1_CPA_start = CPA_start
    var CPU1_CPA_size  = CPA_size - MemConfig.CPU3RAMCode*0x8000
    var CPU3_CPA_start = CPA_start + CPU1_CPA_size
    var CPU3_CPA_size  = MemConfig.CPU3RAMCode*0x8000

    // CDA memSplit
    var CPU3_CDA_start = CDA_start
    var CPU3_CDA_size  = MemConfig.CPU3RAMData*0x4000
    var CPU1_CDA_start = CDA_start + CPU3_CDA_size
    var CPU1_CDA_size  = CDA_size - MemConfig.CPU3RAMData*0x4000

    // Flash split
    var CPU1_Load_start = FRI1_start
    var CPU1_Load_size  = MemConfig.FlashCPU1Load
    var CPU2_Load_start = CPU1_Load_start + CPU1_Load_size
    var CPU2_Load_size  = MemConfig.FlashCPU2Load

    if((MemConfig.bankmode == 0) || (MemConfig.bankmode == 1))
    {
        var CPU3_Load_start = CPU2_Load_start + CPU2_Load_size
        var CPU3_Load_size  = MemConfig.FlashCPU3Load
        var CPU1_Main_start = CPU3_Load_start +  CPU3_Load_size
        var CPU1_Main_size  = MemConfig.CPU1Flash*0x100000 - (MemConfig.FlashCPU1Load + MemConfig.FlashCPU2Load + MemConfig.FlashCPU3Load)
    }
    else
    {
        var CPU1_Main_start = CPU2_Load_start + CPU2_Load_size
        var CPU1_Main_size  = MemConfig.CPU1Flash*0x100000 - (MemConfig.FlashCPU1Load + MemConfig.FlashCPU2Load)
        var CPU3_Load_start = FRI2_start
        var CPU3_Load_size  = MemConfig.FlashCPU3Load
        var CPU3_Main_start = CPU3_Load_start + CPU3_Load_size
        var CPU3_Main_size  = MemConfig.CPU3Flash*0x100000 - MemConfig.FlashCPU3Load
    }
 %%}

// ----------------------------------------------------------------------------
// This linker command file is auto-generated. Do not edit directly.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Device Specific Memory
// ----------------------------------------------------------------------------
MEMORY
{
#ifdef __CPU1
    SRAM_LDAx      : o=`dec2hex(CPU1_LDA_start,8)`, l=`dec2hex(CPU1_LDA_size, 8)`
    SRAM_LPAx      : o=`dec2hex(CPU1_LPA_start,8)`, l=`dec2hex(CPU1_LPA_size, 8)`
    SRAM_CPAx      : o=`dec2hex(CPU1_CPA_start,8)`, l=`dec2hex(CPU1_CPA_size, 8)`
    SRAM_CDAx      : o=`dec2hex(CPU1_CDA_start,8)`, l=`dec2hex(CPU1_CDA_size, 8)`

    FLASH_LOAD     : o=`dec2hex(CPU1_Load_start,8)`, l=`dec2hex(CPU1_Load_size, 8)`
    FLASH_MAIN     : o=`dec2hex(CPU1_Main_start,8)`, l=`dec2hex(CPU1_Main_size, 8)`
#endif

#ifdef __CPU2
    SRAM_LDAx      : o=`dec2hex(CPU2_LDA_start,8)`, l=`dec2hex(CPU2_LDA_size, 8)`
    SRAM_LPAx      : o=`dec2hex(CPU2_LPA_start,8)`, l=`dec2hex(CPU2_LPA_size, 8)`

    FLASH_LOAD     : o=`dec2hex(CPU2_Load_start,8)`, l=`dec2hex(CPU2_Load_size, 8)`
#endif

#ifdef __CPU3
    SRAM_CPAx      : o=`dec2hex(CPU3_CPA_start,8)`, l=`dec2hex(CPU3_CPA_size, 8)`
    SRAM_CDAx      : o=`dec2hex(CPU3_CDA_start,8)`, l=`dec2hex(CPU3_CDA_size, 8)`

    FLASH_LOAD     : o=`dec2hex(CPU3_Load_start,8)`, l=`dec2hex(CPU3_Load_size, 8)`
% if(CPU3_Main_start) {
    FLASH_MAIN     : o=`dec2hex(CPU3_Main_start,8)`, l=`dec2hex(CPU3_Main_size, 8)`
% }
#endif

% c29x.ext_memories.forEach(mem => {
    `mem.name` : o=`dec2hex(mem.start,8)`, l=`dec2hex(mem.size)`
% });

}

% if((MemConfig.bankmode == 0) || (MemConfig.bankmode == 1)) {
// CPU1 AP configurations
// - APR 1 (Flash load region) => `dec2hex(CPU1_Load_start, 8)` - `dec2hex(CPU1_Main_start, 8)`, Exe disabled, No access to any of the links
%       if((CPU1_LPA_size == 0) && (CPU1_CPA_size == 0)) {
// - APR 2 (CPU2/3 RAM)        => `dec2hex(CPU2_LDA_start, 8)` - `dec2hex(CPU1_CDA_start, 8)`, Exe disabled, No access to any of the links
%       } else {
// - APR 2 (CPU2 RAM)          => `dec2hex(CPU2_LDA_start, 8)` - `dec2hex(CPU1_LPA_start, 8)`, Exe disabled, No access to any of the links
// - APR 3 (CPU3 RAM)          => `dec2hex(CPU3_CPA_start, 8)` - `dec2hex(CPU1_CDA_start, 8)`, Exe disabled, No access to any of the links
%       }
% }
% if((MemConfig.bankmode == 2) || (MemConfig.bankmode == 3)) {
// CPU1 AP configurations
// - APR 1 (Flash load region) => `dec2hex(CPU1_Load_start, 8)` - `dec2hex(CPU1_Main_start, 8)`, Exe disabled, No access to any of the links
// - APR 2 (CPU2 RAM)          => `dec2hex(CPU2_LDA_start, 8)` - `dec2hex(CPU1_LPA_start, 8)`, Exe disabled, No access to any of the links

// CPU3 AP configurations
// - APR 1 (Flash load region) => `dec2hex(CPU3_Load_start, 8)` - `dec2hex(CPU3_Main_start, 8)`, Exe disabled, No access to any of the links
% }

// ----------------------------------------------------------------------------
// Application Defined Sections and their Placement
// ----------------------------------------------------------------------------
SECTIONS
{
#ifdef __CPU1
	.codestart : > 0x20100010

// <TODO> Updated to use RAM region to run it on QT/Protium
//    .text : > FLASH_MAIN
//            palign(0x1000),
//            RUN_START(text_start),
//            RUN_END(text_end)
//
//    .rodata : > FLASH_MAIN
//            palign(0x1000),
//            RUN_START(rodata_start),
//            RUN_END(rodata_end)
//
//    .cinit : > FLASH_LOAD
//    .ovly : > FLASH_LOAD

    .text : > SRAM_LPAx
            palign(0x1000),
            RUN_START(text_start),
            RUN_END(text_end)

    .rodata : > SRAM_LDAx
            palign(0x1000),
            RUN_START(rodata_start),
            RUN_END(rodata_end)

    .cinit : > SRAM_LDAx
    .ovly : > SRAM_LDAx

    .stack : > SRAM_LDAx | SRAM_CDAx
            palign(0x1000),
            RUN_START(stack_start),
            RUN_END(stack_end)

    .bss : > SRAM_LDAx | SRAM_CDAx
            palign(0x1000),
            RUN_START(bss_start),
            RUN_END(bss_end)

    .data : > SRAM_LDAx | SRAM_CDAx
            palign(0x1000),
            RUN_START(data_start),
            RUN_END(data_end)
#endif

#ifdef __CPU2
	.codestart : LOAD = FLASH_LOAD, RUN = `dec2hex(CPU2_LPA_start,8)`, TABLE(copyTable),

    .text : LOAD = FLASH_LOAD, RUN = SRAM_LPAx, TABLE(copyTable),
            palign(0x1000),
            RUN_START(text_start),
            RUN_END(text_end)

    .rodata :  LOAD = FLASH_LOAD, RUN = SRAM_LDAx, TABLE(copyTable),
            palign(0x1000),
            RUN_START(rodata_start),
            RUN_END(rodata_end)

    .cinit : > LOAD = FLASH_LOAD, RUN = SRAM_LDAx, TABLE(copyTable),
    .ovly : > `dec2hex(CPU2_Load_start,8)`

    .stack : > SRAM_LDAx
            palign(0x1000),
            RUN_START(stack_start),
            RUN_END(stack_end)

    .bss : > SRAM_LDAx
            palign(0x1000),
            RUN_START(bss_start),
            RUN_END(bss_end)

    .data : > SRAM_LDAx
            palign(0x1000),
            RUN_START(data_start),
            RUN_END(data_end)


#endif

#ifdef __CPU3
% if((MemConfig.bankmode == 2) || (MemConfig.bankmode == 3)) {
    codestart : > `dec2hex(CPU3_Main_start,8)`

	.text : > FLASH_MAIN
            palign(0x1000),
            RUN_START(text_start),
            RUN_END(text_end)

    .rodata : > FLASH_MAIN
            palign(0x1000),
            RUN_START(rodata_start),
            RUN_END(rodata_end)

    .cinit : > FLASH_LOAD
    .ovly : > FLASH_LOAD
% } else {
  	.codestart : LOAD = FLASH_LOAD, RUN = `dec2hex(CPU3_CPA_start,8)`, TABLE(copyTable),

	.text : LOAD = FLASH_LOAD, RUN = SRAM_CPAx, TABLE(copyTable),
            palign(0x1000),
            RUN_START(text_start),
            RUN_END(text_end)

    .rodata :  LOAD = FLASH_LOAD, RUN = SRAM_CDAx, TABLE(copyTable),
            palign(0x1000),
            RUN_START(rodata_start),
            RUN_END(rodata_end)

    .cinit : > LOAD = FLASH_LOAD, RUN = SRAM_CDAx, TABLE(copyTable),
    .ovly : > `dec2hex(CPU3_Load_start,8)`
% }

    .stack : > SRAM_CDAx
            palign(0x1000),
            RUN_START(stack_start),
            RUN_END(stack_end)

    .bss : > SRAM_CDAx
            palign(0x1000),
            RUN_START(bss_start),
            RUN_END(bss_end)

    .data : > SRAM_CDAx
            palign(0x1000),
            RUN_START(data_start),
            RUN_END(data_end)
#endif
}

__LINK2_AP_OVERRIDE = 0x3008000C;

__SECSP0   = 0x3000D000;
__SECSP1   = 0x3000D004;
__SECSP2   = 0x3000D008;
__SECSP3   = 0x3000D00C;
__SECSP4   = 0x3000D010;
__SECSP5   = 0x3000D014;
__SECSP6   = 0x3000D018;
__SECSP7   = 0x3000D01C;

#ifdef __CPU1
__CPU2_LOAD_ADDR  = `dec2hex(CPU2_Load_start,8)`;
__CPU2_CODE_START = `dec2hex(CPU2_LPA_start,8)`;
% if((MemConfig.bankmode == 0) || (MemConfig.bankmode == 1)) {
__CPU3_LOAD_ADDR  = `dec2hex(CPU3_Load_start,8)`;
__CPU3_CODE_START = `dec2hex(CPU3_CPA_start,8)`;
% } else {
__CPU3_CODE_START = `dec2hex(CPU3_Main_start,8)`;
% }
#endif

