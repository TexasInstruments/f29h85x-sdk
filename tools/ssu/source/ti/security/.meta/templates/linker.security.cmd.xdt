%%{
    const Common = system.getScript('/ti/security/Common.js');
    let sysSec   = Common.modStatic('/ti/security/System_Security');
    var cpu2 = system.modules['/driverlib/cpu2.js'];
    let cpu2instance;
    var cpu3 = system.modules['/driverlib/cpu3.js'];
    let cpu3instance;
    let bankmode = Common.getBankModeConfig()

    var Stack2Size = 0;
    Common.modInstances(`/ti/security/Stack`).forEach(stack => {
        if(stack.$name == "STACK2_STACK") { //!! tag
            Stack2Size = stack.size
        }
    })

%%}
// ----------------------------------------------------------------------------
// This linker command file is auto-generated. Do not edit directly.
// ----------------------------------------------------------------------------
% if(sysSec && ((sysSec.ssumode != 1) || (Common.isContextCPU3() == true) || (Common.isContextCPU2() == true))){
% if (sysSec && sysSec.ssumode == 3 && sysSec.inter_security_context_behavior == 'autofix') {
--auto_resolve_protected_calls
% }

--entry_point="code_start"
--stack_size=`Stack2Size`
% if((Common.isContextCPU2() == true) || (Common.isContextCPU3() == true))
% {
--retain="reset_vector"
--retain="nmi_vector"
% }

MEMORY
{
`Common.getMemoryList(system.context)`
%if(cpu3 != null) {
%   cpu3instance = cpu3.$static;
%   let cpu3FlashRegion = Common.getFlashRegion("CPU3")
    // CPU3 load memory

    CPU3_FLASH_REGION               : origin = 0x`Common.toHex(cpu3FlashRegion.origin, 8)`, length = 0x`Common.toHex(cpu3FlashRegion.length, 8)`

%}
}

SECTIONS
{
`Common.getSectionsList(sysSec, system.context)`
%if(cpu2 != null) {
%   cpu2instance = cpu2.$static;
    // CPU2 App Section
    cpu2app         : {} LOAD=CPU2_FLASH_REGION, RUN=CPU2_RAMCOVERREGION0, table(BINIT), palign(8)

%}
%if(cpu3 != null) {
%   cpu3instance = cpu3.$static;
% if(bankmode >= 2){
    // CPU3 App Section
    cpu3app         : {} > CPU3_FLASH_REGION,    palign(8)
% } else {
    // CPU3 App Section
    cpu3app         : {} LOAD=CPU3_FLASH_REGION, RUN=CPU3_RAMCOVERREGION0, table(BINIT), palign(8)
%}
%}
}


__LINK2_AP_OVERRIDE = 0x3008000C;

__SECSP0   = 0x3000D000;
__SECSP1   = 0x3000D004;
__SECSP2   = 0x3000D008;
__SECSP3   = 0x3000D00C;
__SECSP4   = 0x3000D010;
__SECSP5   = 0x3000D014;
__SECSP6   = 0x3000D018;
__SECSP7   = 0x3000D01C;

% if (sysSec && sysSec.addLink1) {
__SECSP1_START = STACK1_STACK_start;
% }
% var i = 3
% Common.modInstances(`/ti/security/Stack`).forEach(stack => {
%   if((stack.$name != "STACK2_STACK") && (stack.$name != "STACK1_STACK")) {
__SECSP`i`_START = `stack.$name`_start;
%   i++
%   }
% })
%} else {
--entry_point="code_start"


MEMORY
{
`Common.getMemoryList(system.context)`
}

SECTIONS
{
`Common.getSectionsList(sysSec, system.context)`
}
%}