/*
 * Copyright (c) 2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef INCLUDE_EXPORTJSON_H_
#define INCLUDE_EXPORTJSON_H_

#include <stdbool.h>
#include <stdint.h>
#include <export/export.h>
#include <transfer_utils.h>
%
% let transferCommon;
% if (system.getProducts()[0].name.includes("C2000"))
% { transferCommon = system.getScript("/utilities/transfer/transferCommon.js");
% } else
% { transferCommon = system.getScript("/transfer/transferCommon.js");}
% 
%
% let exportMod = system.modules[transferCommon.getTransferPath() + "exporter.js"];
% let expInst = exportMod.$instances[0]
% let comsLinkModule = expInst.comsLinkModule;
%

% if (expInst.exportCustomLog) {
//
// Logger Functions
//
extern int EXPORTJSON_sendLog(uint32_t timestamp, char *data);
extern int EXPORTJSON_sendLogInt32Array(uint32_t timestamp, int32_t* data, uint32_t size);
extern int EXPORTJSON_sendLogUint32Array(uint32_t timestamp, uint32_t* data, uint32_t size);
extern int EXPORTJSON_sendLogFloat32Array(uint32_t timestamp, float* data, uint32_t size, int numDecimal);
% }
% if (expInst.$ownedBy && expInst.$ownedBy.fsilogger) {
//
// FSI Logger Functions
//
extern int EXPORTJSON_sendFsiFrame(uint16_t user_data, uint16_t frame_type, uint16_t frame_tag, uint16_t crc, uint16_t* words, uint16_t numWords);
% }

extern int EXPORTJSON_sendKeyValuePointerPairs(ExportKeyValue** keyValues, uint16_t numKeyValues);
extern int EXPORTJSON_sendKeyValuePairs(ExportKeyValue* keyValues, uint16_t numKeyValues);
extern int EXPORTJSON_sendKeyValuePair(ExportKeyValue keyValue);

extern int EXPORTJSON_startSendObject(char * key);
extern int EXPORTJSON_endSendObject();
extern int EXPORTJSON_appendKeyValuePairWithEndingChar(ExportKeyValue keyValue, bool isStr, char end);

extern int EXPORTJSON_sendString(char *cmd, uint16_t cmdLength, char *value, uint16_t valueLength);

extern int EXPORTJSON_sendUInt16(char *cmd, uint16_t cmdLength, uint16_t val);
extern int EXPORTJSON_sendInt16(char *cmd, uint16_t cmdLength, int16_t val);
extern int EXPORTJSON_sendUInt32(char *cmd, uint16_t cmdLength, uint32_t val);
extern int EXPORTJSON_sendInt32(char *cmd, uint16_t cmdLength, int32_t val);
extern int EXPORTJSON_sendUInt64(char *cmd, uint16_t cmdLength, uint64_t val);
extern int EXPORTJSON_sendInt64(char *cmd, uint16_t cmdLength, int64_t val);

extern int EXPORTJSON_sendUInt32ArrayAsByteArray(char *cmd, uint16_t cmdLength, uint32_t* data, uint32_t size);
extern int EXPORTJSON_sendInt32ArrayAsByteArray(char *cmd, uint16_t cmdLength, int32_t* data, uint32_t size);
extern int EXPORTJSON_sendUInt16ArrayAsByteArray(char *cmd, uint16_t cmdLength, uint16_t* data, uint32_t size);
extern int EXPORTJSON_sendInt16ArrayAsByteArray(char *cmd, uint16_t cmdLength, int16_t* data, uint32_t size);
extern int EXPORTJSON_sendFloatArrayAsByteArray(char *cmd, uint16_t cmdLength, float* data, uint32_t size);

extern int EXPORTJSON_sendUInt32AsByteArray(char *cmd, uint16_t cmdLength, uint32_t val);
extern int EXPORTJSON_sendInt32AsByteArray(char *cmd, uint16_t cmdLength, int32_t val);
extern int EXPORTJSON_sendUInt16AsByteArray(char *cmd, uint16_t cmdLength, uint16_t val);
extern int EXPORTJSON_sendInt16AsByteArray(char *cmd, uint16_t cmdLength, int16_t val);
extern int EXPORTJSON_sendFloatAsByteArray(char *cmd, uint16_t cmdLength, float val);

extern int EXPORTJSON_sendBool(char *cmd, uint16_t cmdLength, bool val);

% if (expInst.mode.includes("Bidirectional") && expInst["comsLinkModule"])
% {
extern uint16_t EXPORTJSON_ReadUInt16(char *string);
extern uint32_t EXPORTJSON_ReadUInt32(char *string);
extern uint64_t EXPORTJSON_ReadUInt64(char *string);
extern int16_t EXPORTJSON_ReadInt16(char *string);
extern int32_t EXPORTJSON_ReadInt32(char *string);
extern int64_t EXPORTJSON_ReadInt64(char *string);

extern bool EXPORTJSON_ReadBool(char *string);
extern float EXPORTJSON_ReadFloat(char *string);
extern double EXPORTJSON_ReadDouble(char *string);
extern void EXPORTJSON_parseString(char * rxString, uint16_t rxStringSize);
% }

#endif /* INCLUDE_EXPORTJSON_H_ */
