% let transferCommon;
% if (system.getProducts()[0].name.includes("C2000"))
% { transferCommon = system.getScript("/utilities/transfer/transferCommon.js");
% } else
% { transferCommon = system.getScript("/transfer/transferCommon.js");}
% 
% let exportMod = system.modules[transferCommon.getTransferPath() + "exporter.js"];
% let expInst = exportMod.$instances[0];
% let comsLinkModule = expInst.comsLinkModule;
% let exportBuffer = expInst.exportBuffer;
%
/*
 * Copyright (c) 2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

 
#ifndef EXPORT_H
#define EXPORT_H

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
% if (exportBuffer) {
#include <export/export_buffer.h>
% }

typedef struct {
    char* key;
    char* value;
    uint16_t lengthKey;
    uint16_t lengthValue;
} ExportKeyValue;

% if (expInst.mode.includes("Bidirectional") && comsLinkModule)
% {
typedef void (*ExportCallback)(char *);
typedef struct {
    char* key;
    ExportCallback callback;
} ExportKeyHandler;
% }

extern void EXPORT_init();
extern void EXPORT_transmitCharBlocking(char);
extern void EXPORT_transmitStringLengthBlocking(char *str, uint16_t strLength);
% if (expInst.mode.includes("Bidirectional") && comsLinkModule)
% {
extern void EXPORT_receivedData(uint16_t* receivedData, uint16_t receivedDataLength);
% }
% if ((expInst["comsLink"] == "usb") && !transferCommon.isC2000()) {
extern void EXPORT_cdc_task(void);
% }

% if (exportBuffer) {
#define EXPORT_flushBufferElement       EXPORTBUFF_flushBufferElement
#define EXPORT_transferBufferData       EXPORTBUFF_transferBufferData
#define EXPORT_transferAllBufferData    EXPORTBUFF_transferAllBufferData
% } else {
%   if (transferCommon.isC2000()){
%       if (expInst["comsLink"] == "fsi") {
extern void EXPORT_flushBufferElement();
%       }
%   }
% }

#endif  // EXPORT_H
