/*
 * Copyright (c) 2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
 
#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include <board.h>
#include <export/export_log.h>
% let transferCommon;
% if (system.getProducts()[0].name.includes("C2000"))
% { transferCommon = system.getScript("/utilities/transfer/transferCommon.js");
% } else
% { transferCommon = system.getScript("/transfer/transferCommon.js");}

% let exportMod = system.modules[transferCommon.getTransferPath() + "exporter.js"];
% let expInst = exportMod.$instances[0];
% let expLogBuff = expInst.exportLogBufferModule;
%
//*****************************************************************************
//
// Export Log initilalization function
//
//*****************************************************************************
void EXPORTLOG_init()
{
% if (expInst.exportCustomLogTimestamp){
    CPUTimer_startTimer(`expInst.exportLogTimestampModule.$name`_BASE);
% }
}

% if (expInst.exportCustomLogTimestamp){
void EXPORTLOG_log(char *data) {
    uint32_t us = HWREG(`expInst.exportLogTimestampModule.$name`_BASE + CPUTIMER_O_PRD) - 
                    HWREG(`expInst.exportLogTimestampModule.$name`_BASE + CPUTIMER_O_TIM);
    
    EXPORTPACKAGE_sendcLog(us, data);
}

void EXPORTLOG_logInt32Array(int32_t* data, uint32_t size){
    uint32_t us = HWREG(`expInst.exportLogTimestampModule.$name`_BASE + CPUTIMER_O_PRD) - 
                    HWREG(`expInst.exportLogTimestampModule.$name`_BASE + CPUTIMER_O_TIM);
    EXPORTPACKAGE_sendcLogInt32Array(us, data, size);
}             
void EXPORTLOG_logUint32Array(uint32_t* data, uint32_t size){
    uint32_t us = HWREG(`expInst.exportLogTimestampModule.$name`_BASE + CPUTIMER_O_PRD) - 
                    HWREG(`expInst.exportLogTimestampModule.$name`_BASE + CPUTIMER_O_TIM);
    EXPORTPACKAGE_sendcLogUint32Array(us, data, size);
}            
void EXPORTLOG_logFloat32Array(float* data, uint32_t size, int numDecimal){
    uint32_t us = HWREG(`expInst.exportLogTimestampModule.$name`_BASE + CPUTIMER_O_PRD) - 
                    HWREG(`expInst.exportLogTimestampModule.$name`_BASE + CPUTIMER_O_TIM);
    EXPORTPACKAGE_sendcLogFloat32Array(us, data, size, numDecimal);
}
% }
