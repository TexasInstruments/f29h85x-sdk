/*
 * Copyright (c) 2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
% let transferCommon;
% if (system.getProducts()[0].name.includes("C2000"))
% { transferCommon = system.getScript("/utilities/transfer/transferCommon.js");
% } else
% { transferCommon = system.getScript("/transfer/transferCommon.js");}
% 
%
% let exportMod = system.modules[transferCommon.getTransferPath() + "exporter.js"];
% let expInst = exportMod.$instances[0]
% let comsLinkModule = expInst.comsLinkModule;
% let comsLinkModuleAlt = expInst.comsLinkModuleAlt;
% let exportBuffer = expInst.exportBuffer;

#include <export/export.h>
#include "ti_drivers_config.h"
#include "ti_drivers_open_close.h"
% if (expInst.packageMode == "JSON") {
#include <export/export_json.h>
% }
% if (exportBuffer) {
#include <export/export_buffer.h>
% }
% if (expInst.mode.includes("Bidirectional") && comsLinkModule)
% {
void __attribute__((weak)) EXPORT_receivedData(uint16_t* receivedData, uint16_t receivedDataLength) {}
% }
% if (expInst.mode.includes("Bidirectional"))
% {
//
// Global buffer to store the received data
//
volatile uint16_t exportRXData [`expInst.exportRXLength`] = {0};
% }
% if (expInst["comsLink"] == "fsi") {
volatile uint16_t `comsLinkModule.$name`_transferInProgress = 0;
volatile uint16_t `comsLinkModule.$name`_txBufferIndex = 0;
% }

% if (expInst["comsLink"] == "uart") {
UART_Handle `comsLinkModule.$name`_Handle;
% }

% if (expInst["comsLink"] == "usb") {
//*****************************************************************************
//
// USB Communication
//
//*****************************************************************************
#define `expInst.$name`_CDC_ITF   0


/* A combination of interfaces must have a unique product id, since PC will save device driver after the first plug.
 * Same VID/PID with different interface e.g MSC (first), then CDC (later) will possibly cause system error on PC.
 *
 * Auto ProductID layout's Bitmap:
 *   [MSB]       MIDI | HID | MSC | CDC          [LSB]
 */

#define USB_PID   (6165)
#define USB_VID   (0x451)
#define USB_BCD   0x0200

/*
--------------------------------------------------------------------+
 Device Descriptors
--------------------------------------------------------------------+
*/
tusb_desc_device_t const desc_device =
{
    .bLength            = sizeof(tusb_desc_device_t),
    .bDescriptorType    = TUSB_DESC_DEVICE,
    .bcdUSB             = 0x0200,

    /* Use Interface Association Descriptor (IAD) for CDC */
    /* As required by USB Specs IAD's subclass must be common class (2) and protocol must be IAD (1) */
    .bDeviceClass       = TUSB_CLASS_MISC,
    .bDeviceSubClass    = MISC_SUBCLASS_COMMON,
    .bDeviceProtocol    = MISC_PROTOCOL_IAD,
    .bMaxPacketSize0    = CFG_TUD_ENDPOINT0_SIZE,

    .idVendor           = USB_VID,
    .idProduct          = USB_PID,
    .bcdDevice          = 0x1000,

    .iManufacturer      = 0x01,
    .iProduct           = 0x02,
    .iSerialNumber      = 0x03,

    .bNumConfigurations = 0x01
};

/* Invoked when received GET DEVICE DESCRIPTOR */
/* Application return pointer to descriptor */
uint8_t const * tud_descriptor_device_cb(void)
{
  return (uint8_t const *) &desc_device;
}

/*
--------------------------------------------------------------------+
 Configuration Descriptor
--------------------------------------------------------------------+
*/
enum
{
  ITF_NUM_CDC_0 = 0,
  ITF_NUM_CDC_0_DATA,
  ITF_NUM_TOTAL
};

#define CONFIG_TOTAL_LEN    (TUD_CONFIG_DESC_LEN + CFG_TUD_CDC * TUD_CDC_DESC_LEN)

#define EPNUM_CDC_0_NOTIF   0x81
#define EPNUM_CDC_0_DATA    0x02


uint8_t const desc_fs_configuration[] =
{
  /* Config number, interface count, string index, total length, attribute, power in mA */
  TUD_CONFIG_DESCRIPTOR(1, ITF_NUM_TOTAL, 0, CONFIG_TOTAL_LEN, TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP, 100),

  /* 1st CDC: Interface number, string index, EP notification address and size, EP data address (out, in) and size. */
  TUD_CDC_DESCRIPTOR(ITF_NUM_CDC_0, 4, EPNUM_CDC_0_NOTIF, 8, EPNUM_CDC_0_DATA, 0x80 | EPNUM_CDC_0_DATA, 64),

};

#if TUD_OPT_HIGH_SPEED
uint8_t const desc_hs_configuration[] =
{
  /* Config number, interface count, string index, total length, attribute, power in mA */
  TUD_CONFIG_DESCRIPTOR(1, ITF_NUM_TOTAL, 0, CONFIG_TOTAL_LEN, TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP, 100),

  /* 1st CDC: Interface number, string index, EP notification address and size, EP data address (out, in) and size. */
  TUD_CDC_DESCRIPTOR(ITF_NUM_CDC_0, 4, EPNUM_CDC_0_NOTIF, 8, EPNUM_CDC_0_DATA, 0x80 | EPNUM_CDC_0_DATA, 512),

};

/* device qualifier is mostly similar to device descriptor since we don't change configuration based on speed */
tusb_desc_device_qualifier_t const desc_device_qualifier =
{
  .bLength            = sizeof(tusb_desc_device_t),
  .bDescriptorType    = TUSB_DESC_DEVICE,
  .bcdUSB             = USB_BCD,

  .bDeviceClass       = TUSB_CLASS_MISC,
  .bDeviceSubClass    = MISC_SUBCLASS_COMMON,
  .bDeviceProtocol    = MISC_PROTOCOL_IAD,

  .bMaxPacketSize0    = CFG_TUD_ENDPOINT0_SIZE,
  .bNumConfigurations = 0x01,
  .bReserved          = 0x00
};

/* Invoked when received GET DEVICE QUALIFIER DESCRIPTOR request */
/* Application return pointer to descriptor, whose contents must exist long enough for transfer to complete. */
/* device_qualifier descriptor describes information about a high-speed capable device that would */
/* change if the device were operating at the other speed. If not highspeed capable stall this request. */
uint8_t const* tud_descriptor_device_qualifier_cb(void)
{
  return (uint8_t const*) &desc_device_qualifier;
}

/* Invoked when received GET OTHER SEED CONFIGURATION DESCRIPTOR request */
/* Application return pointer to descriptor, whose contents must exist long enough for transfer to complete */
/* Configuration descriptor in the other speed e.g if high speed then this is for full speed and vice versa */
uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index)
{
  (void) index; /* for multiple configurations */

  /* if link speed is high return fullspeed config, and vice versa */
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_fs_configuration : desc_hs_configuration;
}

#endif

/* Invoked when received GET CONFIGURATION DESCRIPTOR */
/* Application return pointer to descriptor */
/* Descriptor contents must exist long enough for transfer to complete */
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
  (void) index; /* for multiple configurations */

#if TUD_OPT_HIGH_SPEED
  /* Although we are highspeed, host may be fullspeed. */
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
#endif
}

/*
--------------------------------------------------------------------+
 String Descriptors
--------------------------------------------------------------------+
*/
/* array of pointer to string descriptors */
char const* string_desc_arr [] =
{
  (const char[]) { 0x09, 0x04 },                /* 0: is supported language is English (0x0409) */
  "Texas Instruments ,Inc",                     /* 1: Manufacturer */
  "AM64x-AM243x",                               /* 2: Product */
  "01.00.00.00",                                /* 3: Serials, should use chip ID */
  "AM64x-AM243x CDC",                           /* 4: CDC Interface */
};

static uint16_t _desc_str[32];

/* Invoked when received GET STRING DESCRIPTOR request */
/* Application return pointer to descriptor, whose contents must exist long enough for transfer to complete */
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
    chr_count = 1;
  }else
  {
    /* Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors. */
    /* https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors */

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;

    const char* str = string_desc_arr[index];

    /* Cap at max char */
    chr_count = strlen(str);
    if ( chr_count > 31 ) chr_count = 31;

    /* Convert ASCII string into UTF-16 */
    for(uint8_t i=0; i<chr_count; i++)
    {
      _desc_str[1+i] = str[i];
    }
  }

  /* first byte is length (including header), second byte is string type */
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);

  return _desc_str;
}

void EXPORT_cdc_task(void)
{
    uint32_t ui32Count;
    % if (expInst.mode.includes("Bidirectional"))
    % {
    uint32_t ui32Read;
    % }
    uint32_t ui32Available;

    //
    // connected() check for DTR bit
    // Most but not all terminal client set this when making connection
    //
    // if ( tud_cdc_n_connected(`expInst.$name`_CDC_ITF) )
    //
    {

        ui32Available = tud_cdc_n_available(`expInst.$name`_CDC_ITF);

    % if (expInst.mode.includes("Bidirectional"))
    % {
        if (ui32Available >= `expInst.exportRXLength`)
        {
            ui32Read = tud_cdc_n_read(`expInst.$name`_CDC_ITF, exportRXData, ui32Available);
            if (ui32Read != `expInst.exportRXLength`)
            {
                //
                // Error
                //
            }
            else
            {
        % if (expInst.$ownedBy) {
            % var gui = expInst.$ownedBy;
            % if (expInst.packageMode == "JSON") {
                EXPORTPACKAGE_parseString((char *)exportRXData, `expInst.exportRXLength`);
            % }
        % }
                EXPORT_receivedData((uint16_t*)exportRXData, `expInst.exportRXLength`);
            }
        }
    % }
    % else
    % {
        uint8_t buf[512];
        uint32_t count = tud_cdc_n_read(`expInst.$name`_CDC_ITF, buf, ui32Available);
    % }
    }
}

% }

//*****************************************************************************
//
// EXPORT Transmit and Init
//
//*****************************************************************************
void EXPORT_transmitCharBlocking(char c)
{
    % if (expInst["comsLink"] == "uart") {
    UART_Transaction trans;
    UART_Transaction_init(&trans);
    trans.buf = &c;
    trans.count = 1;

    UART_write(`comsLinkModule.$name`_Handle, &trans);
    % } else if (expInst["comsLink"] == "usb") {
    tud_cdc_n_write(myEXPORT0_CDC_ITF, &c, 1);
    tud_cdc_n_write_flush(myEXPORT0_CDC_ITF);
    % }
    % else if (expInst["comsLink"] == "fsi") {
    while(`comsLinkModule.$name`_transferInProgress == 1);
    FSI_writeTxBuffer(`comsLinkModule.$name`_BASE, (const uint16_t *)&c, 1, `comsLinkModule.$name`_txBufferIndex);
    `comsLinkModule.$name`_txBufferIndex += 1;
    if (`comsLinkModule.$name`_txBufferIndex >= `expInst.exportRXLength`) {
        `comsLinkModule.$name`_txBufferIndex = 0;
        //
        // Start Transfer
        //
        FSI_startTxTransmit(`comsLinkModule.$name`_BASE);
        `comsLinkModule.$name`_transferInProgress = 1;
    }
    % }
}

void EXPORT_transmitStringLengthBlocking(char *str, uint16_t strLength)
{
    % if (expInst["comsLink"] == "uart") {
    UART_Transaction trans;
    UART_Transaction_init(&trans);
    trans.buf = str;
    trans.count = strLength;

    UART_write(myEXPORT0_UART_Handle, &trans);
    % } else if (expInst["comsLink"] == "usb") {
    tud_cdc_n_write(myEXPORT0_CDC_ITF, str, strLength);
    tud_cdc_n_write_flush(myEXPORT0_CDC_ITF);
    % }
    % else if (expInst["comsLink"] == "fsi") {
    char * strToWrite = str;
    uint16_t remLength = strLength;
    uint16_t spaceRemaining = 0;
    uint16_t writeLength = 0;
    while(remLength) {
        while(`comsLinkModule.$name`_transferInProgress == 1);
        spaceRemaining = `expInst.exportRXLength` - `comsLinkModule.$name`_txBufferIndex;
        if (remLength > spaceRemaining) {
            writeLength = spaceRemaining;
            remLength = remLength - spaceRemaining;
        }
        else {
            writeLength = remLength;
            remLength = 0;
        }
        
        FSI_writeTxBuffer(`comsLinkModule.$name`_BASE, (const uint16_t *)strToWrite, writeLength, `comsLinkModule.$name`_txBufferIndex);
        `comsLinkModule.$name`_txBufferIndex += writeLength;
        strToWrite += writeLength;

        if (`comsLinkModule.$name`_txBufferIndex >= `expInst.exportRXLength`) {
            `comsLinkModule.$name`_txBufferIndex = 0;
            //
            // Start Transfer
            //
            FSI_startTxTransmit(`comsLinkModule.$name`_BASE);
            `comsLinkModule.$name`_transferInProgress = 1;
        }
    }
    % }
}

void EXPORT_init()
{
    //
    // Initialize the HW module
    //

    % if (exportBuffer) {
    //
    // Export Buffer is used. Initiliza the buffer.
    //
    EXPORTBUFF_init();
    % }

    % if (expInst["comsLink"] == "uart") {
    myEXPORT0_UART_Handle = gUartHandle[`comsLinkModule.$name.toUpperCase()`];
    % }
    % if (expInst["comsLink"] == "fsi") {
    //
    // Flush Sequence ensures flushing
    // of Rx data/clock lines and prepares it for reception
    //
    FSI_executeTxFlushSequence(`comsLinkModule.$name`_BASE, 
        `comsLinkModule.$name`_PRESCALER_VAL);

    FSI_setTxUserDefinedData(`comsLinkModule.$name`_BASE, 0);
    % }
}

//*****************************************************************************
//
// Interrupts
//
//*****************************************************************************
% if (expInst.mode.includes("Bidirectional") && expInst["comsLinkModule"])
% {
    % if (expInst["comsLink"] == "fsi") {
//
// COMs link RX Interrupt
//
interrupt void `comsLinkModuleAlt["fsiRxInt1"]["interruptHandler"]`(void)
{
    // FSI_FrameType rxFrameType; 
    // uint16_t rxFrameTag;
    // uint16_t rxUdata;
    
    // rxFrameType = FSI_getRxFrameType(`comsLinkModuleAlt.$name`_BASE);
    // rxFrameTag = FSI_getRxFrameTag(`comsLinkModuleAlt.$name`_BASE);
    // rxUdata = FSI_getRxUserDefinedData(`comsLinkModuleAlt.$name`_BASE);

    //
    // Read data
    //
    FSI_readRxBuffer(`comsLinkModuleAlt.$name`_BASE, (uint16_t *)exportRXData, `expInst.exportRXLength`, 0);
    

    if (EXPORT_receivedData) {
        EXPORT_receivedData((uint16_t *)exportRXData, `expInst.exportRXLength`);
    }

%
% if (expInst.$ownedBy) {
    % var gui = expInst.$ownedBy;
    % if (expInst.packageMode == "JSON") {
    EXPORTPACKAGE_parseString((char *)exportRXData, `expInst.exportRXLength`);
    % }
% }
% 

    FSI_clearRxEvents(`comsLinkModuleAlt.$name`_BASE, FSI_RX_EVT_FRAME_DONE | FSI_RX_EVT_DATA_FRAME);
}
    % }
% }
% if (expInst["comsLink"] == "fsi") {
void `comsLinkModule["fsiTxInt1"]["interruptHandler"]`(void)
{
    `comsLinkModule.$name`_transferInProgress = 0;
    FSI_clearTxEvents(`comsLinkModule.$name`_BASE, FSI_TX_EVTMASK);
}
%}
