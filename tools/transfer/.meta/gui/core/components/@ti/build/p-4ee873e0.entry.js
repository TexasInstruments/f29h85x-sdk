import{r as t}from"./p-84e39b72.js";import{connectionManager as e}from"../gc-target-connection-manager/lib/ConnectionManager";import{GcPromise as o}from"../gc-core-assets/lib/GcPromise";import{GcUtils as r}from"../gc-core-assets/lib/GcUtils";import{ActionRegistry as i}from"../gc-widget-menu/lib/ActionRegistry";async function n(t){try{const r=document.querySelectorAll("gc-target-configuration");const i=[];for(let t=0;t<r.length;t++){i.push(e.whenConfigurationReady(r[t].id||"default"))}if(t){i.push(e.whenConfigurationReady(t))}await o.timeout(Promise.all(i),5e3,"")}catch(t){}if(r.isCCS){e.connectToCCS().catch((()=>{}))}else{e.connect().catch((()=>{}))}e.allowAutoConnectOnDeviceDetection=true}let a=class{constructor(e){t(this,e);this.autoConnect=false}activeConfigurationChanged(){const t=this.activeConfiguration||"default";o.timeout(e.whenConfigurationReady(t),5e3,"").finally((()=>{e.setActiveConfiguration(t)}))}componentDidLoad(){this.activeConfigurationChanged();i.registerAction("cmd_open_program_loader_dialog",new class{run(){const t=document.querySelector("gc-target-program-loader");if(t){t.loadProgram()}}isVisible(){const t=document.querySelector("gc-target-program-loader");return!!t}isEnabled(){return!r.isInDesigner}});if(!r.isInDesigner&&(this.autoConnect||r.isCCS)){if(this.activeConfiguration){n(this.activeConfiguration)}}}static get watchers(){return{activeConfiguration:["activeConfigurationChanged"]}}};export{a as gc_target_connection_manager};
//# sourceMappingURL=p-4ee873e0.entry.js.map