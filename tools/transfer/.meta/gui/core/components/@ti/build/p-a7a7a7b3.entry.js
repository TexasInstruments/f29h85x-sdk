import{r as t,c as i,g as e,h as s}from"./p-84e39b72.js";import{SysConfigModel as n}from"../gc-model-sysconfig/lib/SysConfigModel";import{c as o}from"./p-0c6e1a4c.js";import{GcUtils as a}from"../gc-core-assets/lib/GcUtils";import{GcPromise as r}from"../gc-core-assets/lib/GcPromise";import{GcConsole as c}from"../gc-core-assets/lib/GcConsole";import{bindingRegistry as d}from"../gc-core-databind/lib/CoreDatabind";const h=new c("gc-widget-sysconfig");let g=class{constructor(e){t(this,e);this.scriptChanged=i(this,"script-changed",7);this.impl=undefined;this.optional=false}onScriptChanged(){this.loadConfigScript()}async loadConfigScript(t){try{await g.whenSysConfigReady.promise;this.scriptChanged.emit({status:"busy"});this.scriptChanged.emit({status:"success",scriptEnv:await this.impl.loadConfigScript(t)})}catch(t){this.scriptChanged.emit({status:"error",message:t.message||t.toString()});return t}}async getConfigScript(){await g.whenSysConfigReady.promise;return await this.impl.getConfigScript()}async getGeneratedFile(t){await g.whenSysConfigReady.promise;return await this.impl.getGeneratedFile(t)}async addInstance(t,i,e){await g.whenSysConfigReady.promise;return await this.impl.addInstance(t,i)}async getEnvironment(){await g.whenSysConfigReady.promise;return this.impl.scriptEnvironment}componentWillLoad(){if(a.isInDesigner){this.el["getAdditionalProperties"]=t=>this.impl?.lookupSuggestedBindings(t)??[]}if(a.isInDesigner){if(typeof require==="undefined"){window.require=window.parent["require"]}if(typeof process==="undefined"){window.process=window.parent["process"]}if(typeof __dirname==="undefined"){window.__dirname=window.parent["__dirname"]}if(typeof __filename==="undefined"){window.__filename=window.parent["__filename"]}if(typeof window["nw"]==="undefined"){window["nw"]=window.parent["nw"]}}[{name:"modalRoot",type:"span"},{name:"notificationRoot",type:"span"},{name:"authIFrame",type:"iframe",hidden:true}].forEach((({name:t,type:i,hidden:e})=>{let s=document.getElementById(t);if(!s){s=document.createElement(i);s.id=t;if(e){s.style.cssText="display: none;"}document.body.appendChild(s)}}));const t="/sysconfig/embed.js";let i=document.querySelector(`script[src="${t}}"]`);if(!i){h.debug(`Creating <script src=${t}> tag.`);i=document.createElement("script");i.src=t;i.onload=()=>g.whenSysConfigReady.resolve();i.onerror=i=>{const e=`Failed to load ${t} Please ensure the sysconfig command line parameter is set to point to a SysConfig installation, when starting the GC server.`;this.scriptChanged.emit({status:"error",message:e});g.whenSysConfigReady.reject(new Error(e))};document.body.appendChild(i)}}async connectedCallback(){await g.whenSysConfigReady.promise;h.debug("Creating new SysConfigModel()");this.impl=new n(o(this.el),window.ti.SysConfig.asyncCreateEnv)}async disconnectedCallback(){await g.whenSysConfigReady.promise;if(this.impl){this.impl.dispose();this.impl=undefined}}get el(){return e(this)}static get watchers(){return{boardPath:["onScriptChanged"],partName:["onScriptChanged"],variant:["onScriptChanged"],package:["onScriptChanged"],scriptPath:["onScriptChanged"],sdkVersion:["onScriptChanged"],sdkName:["onScriptChanged"],metadataPath:["onScriptChanged"],deviceName:["onScriptChanged"],deviceId:["onScriptChanged"]}}};g.whenSysConfigReady=r.defer();const f=":host{overflow:hidden;min-height:100px;min-width:100px}";let m=class{constructor(e){t(this,e);this.cssPropertyChanged=i(this,"css-property-changed",7);this.unmountRoot=null;this.tabName="Software";this.onScriptChangedEventHandler=t=>{this.remountTab(t.detail)};this._refresh=0;this.hidden=false}remountTab(t){if(!this.el){return}if(this.unmountRoot){window.ti.SysConfig.unmount(this.unmountRoot);this.unmountRoot=null}this.errorMessageToDisplay=t.status==="error"?t.message:undefined;if(t.status==="success"){const i=document.querySelector(`gc-widget-sysconfig#${this.el.id} > span#reactRoot`);try{window.ti.SysConfig.mountTab(i,t.scriptEnv,this.tabName);this.unmountRoot=i}catch(t){this.errorMessageToDisplay=`Failed to mount SysConfig ${this.tabName} tab: ${t.message||t.toString()}`}}}updateActiveModel(t){if(this.activeSysConfigModel===t){return}if(this.activeSysConfigModel){this.activeSysConfigModel.removeEventListener("script-changed",this.onScriptChangedEventHandler)}this.activeSysConfigModel=t;if(this.activeSysConfigModel){this.activeSysConfigModel.addEventListener("script-changed",this.onScriptChangedEventHandler)}}async getActiveSysConfigEnv(){if(this.modelId){this.updateActiveModel(document.querySelector(`gc-model-sysconfig#${this.modelId}`));const t=await d.waitForModelReady(this.modelId,5e3);if(t instanceof n){return r.timeout(t.scriptEnvironment,5e3,`timeout waiting for model id=${this.modelId} to be ready.`)}throw new Error(`Model id=${this.modelId} is not a gc-model-sysconfig instance.`)}const t=document.querySelectorAll("gc-model-sysconfig");const i=[];for(let e=0;e<t.length;e++){i.push(t[e].id)}if(i.length<=0){throw new Error(`Cannot find a gc-model-sysconfig to use for widget id=${this.el.id}`)}this.updateActiveModel(t[0]);const e=await r.timeout(Promise.all(i.map((t=>d.waitForModelReady(t)))),5e3,"Timeout waiting for all gc-model-sysconfig components to be ready.");const s=e.filter((t=>t instanceof n))[0];if(!s){throw new Error("Programmer error: gc-model-sysconfig did not register the correct type of instance.")}return r.timeout(s.scriptEnvironment,5e3,`timeout waiting for model id=${s.id} to be ready.`)}async onTabChanged(){try{if(!this.el){return}const t=await this.getActiveSysConfigEnv();this.remountTab({status:"success",scriptEnv:t})}catch(t){this.remountTab({status:"error",message:t.message||t.toString()})}}componentDidLoad(){if(this.el){const t=document.createElement("span");t.id="reactRoot";t.setAttribute("style","position: absolute; top: 0; bottom: 0; left: 0; right: 0");this.el.shadowRoot?.host?.appendChild(t)}this.onTabChanged()}disconnectedCallBack(){const{unmount:t}=window.ti.SysConfig;if(this.unmountRoot){t(this.unmountRoot)}this.unmountRoot=null}render(){if(this.unmountRoot){return s("slot",null)}if(this.errorMessageToDisplay){return s("gc-widget-icon",{size:"m",id:"errorMessageIcon",icon:"alert:warning",appearance:"warn",tooltip:this.errorMessageToDisplay})}return s("gc-widget-progress-spinner",null)}async setCSSProperty(t,i){i=i.trim();if(await this.getCSSProperty(t)!==i){this.el.style.setProperty(t,i);this.cssPropertyChanged.emit({name:t,value:i})}}async getCSSProperty(t){return getComputedStyle(this.el).getPropertyValue(t).trim()}async refresh(){this._refresh++}get el(){return e(this)}static get watchers(){return{modelId:["onTabChanged"],tabName:["onTabChanged"]}}};m.style=f;export{g as gc_model_sysconfig,m as gc_widget_sysconfig};
//# sourceMappingURL=p-a7a7a7b3.entry.js.map