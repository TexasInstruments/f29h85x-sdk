import{r as e,g as i}from"./p-5bb37414.js";import{TargetProgramLoader as r}from"../gc-target-program-loader/lib/TargetProgramLoader";import{c as t}from"./p-0c6e1a4c.js";import{ServicesRegistry as a}from"../gc-core-services/lib/ServicesRegistry";import{targetConfigServiceType as o}from"../gc-service-target-config/lib/TargetConfigService";import{createPropertyAutoFill as s}from"../gc-core-assets/lib/GcDesigner";import{ActionRegistry as n}from"../gc-widget-menu/lib/ActionRegistry";import{GcMessageDialog as c}from"../gc-widget-message-dialog/lib/GcMessageDialog";import{connectionManager as g}from"../gc-target-connection-manager/lib/ConnectionManager";import{GcUtils as l}from"../gc-core-assets/lib/GcUtils";const d=a.getService(o);let m=class{constructor(i){e(this,i);this.impl=undefined;this.propertyAutoFill=undefined;this.autoProgram=false;this.optional=false;this.sram=false}async loadProgram(){var e,i;const r=this.programOrBinPath;if(!r){return await c.error(`gc-target-program-loader id=${this.el.id} is missing a program or binary path property`)}const t=document.querySelector('gc-widget-menuaction[action-id="cmd_open_program_loader_dialog"]');const a=(e=t===null||t===void 0?void 0:t.label.split("...")[0].trim())!==null&&e!==void 0?e:"Load Program";const o=a.split(" ")[0];const s=(i=r===null||r===void 0?void 0:r.lastIndexOf("/"))!==null&&i!==void 0?i:-1;const n=`${o}ing ${r.substring(s+1)} for ${this.impl.toString()}`;if(await c.prompt(a,`${n}?`,"image:flash_on")==="confirm"){const{progress:e,result:i}=await c.progress(a,n,"image:flash_on",true,0,100,true);let r=false;const t=new class i{assertStillConnecting(){if(r){throw Error("Operation aborted by user")}}addProgressMessage(e){g.addProgressMessage(e)}addErrorMessage(e){g.addProgressMessage(e)}addWarningMessage(e){g.addProgressMessage(e)}addDebugMessage(i){g.addProgressMessage(i);e.setMessage(i)}};i.then((e=>{r=e==="dismiss"}));try{await g.loadProgram(this.impl,t,e.setValue);e.setValue(100)}catch(i){e.cancel();if(!r){c.error(`${a} Failed: ${i.message||i.toString()}`)}}}}connectedCallback(){const e=t(this.el);this.impl=new r(e);if(this.el.id){n.registerAction(`open_program_loader_dialog_${this.el.id}`,{run:()=>{this.loadProgram()},isEnabled(){return!l.isInDesigner}})}this.propertyAutoFill=s(this.el);this.propertyAutoFill.register("deviceName",(async()=>(await d.getDevices()).map((e=>e.id)))).register("connectionName",(async()=>(await d.getConnections(e["deviceName"])).map((e=>e.id))))}disconnectedCallback(){this.propertyAutoFill.unregister("deviceName").unregister("connectionName")}get el(){return i(this)}};export{m as gc_target_program_loader};
//# sourceMappingURL=p-5b854cae.entry.js.map