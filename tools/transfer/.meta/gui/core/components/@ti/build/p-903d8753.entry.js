import{r as t,c as e,h as i,g as s}from"./p-84e39b72.js";import{GcConsole as o}from"../gc-core-assets/lib/GcConsole";import{UndoStack as n}from"../gc-core-assets/lib/UndoStack";import{ServicesRegistry as r}from"../gc-core-services/lib/ServicesRegistry";import{targetConfigServiceType as c}from"../gc-service-target-config/lib/TargetConfigService";import{W as a}from"./p-7b70dbb4.js";import{GcPromise as h}from"../gc-core-assets/lib/GcPromise";import{SystemSetupEditor as l}from"../gc-target-ccxml-parser/lib/TargetCcxmlParser";import{GcUtils as d}from"../gc-core-assets/lib/GcUtils";import"../gc-core-assets/lib/GcFiles";import"../gc-core-assets/lib/GcLocalStorage";import"../gc-widget-message-dialog/lib/GcMessageDialog";class g{constructor(t,e,i,s=""){this.editor=t;this.value=e;this.description=s;if(!this.description){if(e){this.description=`set ${i}=${this.value.toString()}`}else{this.description=`clear ${i}`}}}undo(){this.value=this.swap(this.value)}redo(){this.value=this.swap(this.value)}toString(){return this.description}}class u{constructor(t,e=""){this.systemSetupEditor=t;this.id=e;this._cpuList=new Array;this._cpuList=this.systemSetupEditor?.getCpusList().map((t=>({element:t,name:t.getTextToDisplay()})))??[];this.selectedCpuIndex=this._cpuList.length>0?0:-1}static createNew(t){const e=h.create((async(i,s)=>{try{let{ccxmlText:s,connectionName:o,deviceName:n,fileName:a}=t;if(!s){const t=r.getService(c);s=await t.getConfig(o,n)}const h=new l;a=a||"./default.ccxml";await h.load(s,a,(()=>e.cancelled));if(e.cancelled){throw new Error("operation cancelled")}const d=h.getErrorMessage(null);if(d){throw new Error(d)}if(!o||!n){const t=h.getComponentList("connection")[0];o=h.getComponentName(t);const e=h.getComponentList("board",t)[0];if(e){n=h.getComponentName(e)}else{const e=h.getComponentList("device",t)[0];n=h.getComponentName(e)}}await h.ensureBuiltInProperties("cpu");i(new u(h,`${o}/${n}`))}catch(t){s(t)}}));return e}get cpuList(){return this._cpuList.map((t=>t.name))}get selectedCpu(){return this._cpuList[this.selectedCpuIndex].name}set selectedCpu(t){this.selectedCpuIndex=this._cpuList.findIndex((e=>e.name===t))}get selectedPropertiesCaption(){let t=this.selectedPath&&this.systemSetupEditor.findElementTypeByPath(this.selectedPath);if(t){t=t.charAt(0).toUpperCase()+t.slice(1)}return t}setSelection(t,e){if(t===0){this.selectedCpu=e}else{this.selectedPath=e}}get properties(){if(this.selectedCpuIndex<0||this.selectedCpuIndex>=this._cpuList.length){return[]}return this.systemSetupEditor?.getProperties(this._cpuList[this.selectedCpuIndex].element,true)??[]}getValues(t,e){return t.reduce(((t,i)=>{const s=i.id??i.caption;if(s&&this.systemSetupEditor){t[s]=this.systemSetupEditor.getProperty(i,i.widgetType==="select"?true:false,e)}return t}),{})}setValue(t,e,i){const s=(t===0?this.properties:this.advancedProperties).find((t=>(t.id??t.caption)===e));if(!s){throw new Error(`No such property with id ${e}`)}this.systemSetupEditor?.setProperty(s,i,s.widgetType==="select"?true:false)}async ensureBuiltInProperties(){const t=this.selectedPath&&this.systemSetupEditor.findElementTypeByPath(this.selectedPath);if(t){return this.systemSetupEditor.ensureBuiltInProperties(t)}}get advancedProperties(){const t=this.selectedPath&&this.systemSetupEditor.findElementByPath(this.selectedPath);if(!t){return[]}return this.systemSetupEditor?.getProperties(t)}get root(){return this.systemSetupEditor?.getRoot()??undefined}get ccxmlText(){return this.systemSetupEditor?.getXmlText()??""}}u.setPropertyOperation=class{constructor(t,e,i,s,o,n){this.editor=t;this.page=e;this.selection=i;this.name=s;this.newValue=o;this.oldValue=n}undo(){this.editor.setProperty(this.page,this.selection,this.name,this.oldValue)}redo(){this.editor.setProperty(this.page,this.selection,this.name,this.newValue)}toString(){return`set ${this.name}=${this.newValue}`}};u.SetConnectionOperation=class extends g{constructor(t,e){super(t,e,"connection")}swap(t){const e=this.editor.getSelection();this.editor.setSelection({...e,connectionName:t});return e.connectionName}};u.SetDeviceOperation=class extends g{constructor(t,e){super(t,e,"device")}swap(t){const e=this.editor.getSelection();this.editor.setSelection({...e,deviceName:t});return e.deviceName}};u.SetSessionOperation=class extends g{constructor(t,e,i,s){super(t,{ccxml:e,selection:i},"","replace all ccxml text");this.id=s}swap(t){const e=this.editor.swapConfiguration(this.id,t.ccxml);const i=this.editor.getSelection();this.editor.setSelection(t.selection);return{ccxml:e,selection:i}}};u.nullSession=new u;class m{constructor(t,e,i=(t=>{})){this.onSelectedDeviceChanged=i;t=t.filter((t=>!t.id.includes("(Bootloader)")));this.devicesOrBoards=[...t.map((t=>({type:"device",...t}))),...e.map((t=>({type:"board",...t})))];this.rowCount=this.devicesOrBoards.length}getValue(t,e){const i=this.devicesOrBoards[t].id;if(e==="selected"){return i===this.selectedDevice}return i}setValue(t,e,i){if(e==="selected"){const e=i?this.devicesOrBoards[t].id:undefined;this.onSelectedDeviceChanged(e)}}getDeviceByName(t){return this.devicesOrBoards.find((e=>e.id===t))}getDeviceByRow(t){return this.devicesOrBoards[t]}lookupRowByName(t){return this.devicesOrBoards.findIndex((e=>e.id===t))}static isDeviceFiltered(t,e){return t.toLowerCase().includes(e.toLowerCase())}static filterByFunction(t,e,i){const s=i.indexOf(";");const o=s>0?+i.substring(0,s):-1;i=i.substring(s+1);const n=e.getDeviceByRow(t);return(o<0||n.connectionIndices.includes(o))&&(!i||m.isDeviceFiltered(n.id,i))}readDeviceDescription(t){const e=h.create((async(e,i)=>{try{const i=this.getDeviceByName(t);if(!i){throw new Error(`Cannot read description: board or device ${t} does not exist.`)}const s=r.getService(c);const o=await s.getFile(`ccs_base/common/targetdb/${i.type}s/${i.xmlFile}.xml`);let n;const a=s.parseConfig(o);for(let t=a.getRootNode()?.firstChild;t;t=t.nextSibling){if(t.nodeName===i.type){n=t.getAttribute("description")}}if(!n){n=`${t} (description not available)`}e(n)}catch(t){i(t)}}));return e}}const p=':host::-webkit-scrollbar,::-webkit-scrollbar{width:var(--gc-scrollbar-width, var(--theme-scrollbar-width, 8px));height:var(--gc-scrollbar-width, var(--theme-scrollbar-width, 8px))}:host::-webkit-scrollbar-track,::-webkit-scrollbar-track{background:var(--gc-scrollbar-track-background-color, var(--theme-scroll-track-color, rgba(35, 31, 32, 0.2)))}:host::-webkit-scrollbar-thumb,::-webkit-scrollbar-thumb{background:var(--gc-scrollbar-thumb-background-color, var(--theme-scroll-thumb-color, rgba(35, 31, 32, 0.65)))}:host::-webkit-scrollbar-thumb:hover,::-webkit-scrollbar-thumb:hover{background:var(--gc-scrollbar-thumb-background-color-hover, var(--theme-scroll-thumb-color-hover, rgba(35, 31, 32, 0.8)))}:host::-webkit-scrollbar-corner,::-webkit-scrollbar-corner{background:rgba(0, 0, 0, 0)}:host(:focus),:host *:focus{outline:none}:host{-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none;font-family:var(--gc-font-family, var(--theme-font-family, "Roboto", "Open Sans", "Segoe UI", "Tahoma", "sans-serif"));font-size:var(--gc-font-size, var(--theme-font-size, 14px));font-weight:400;color:var(--gc-font-color, var(--gc-font-color, var(--theme-font-color, #555555)));margin:var(--gc-margin, var(--theme-margin, 5px));display:inline-block;box-sizing:border-box}:host .user-select{-webkit-user-select:text;-khtml-user-select:text;-moz-user-select:text;-ms-user-select:text;-o-user-select:text;user-select:text}:host .text-link{color:var(--gc-link-color, var(--gc-link-color, var(--theme-link-color, #333333)));--gc-color:var(--gc-link-color, var(--gc-link-color, var(--theme-link-color, #333333)));--gc-text-decoration-hover:underline;--gc-cursor-hover:pointer}:host .text-link:not([disabled]):hover{text-decoration:underline;cursor:pointer}:host([hidden]){display:none !important}:host([readonly]) *{pointer-events:none}:host([disabled]) *{cursor:not-allowed}:host([caption]:not([caption=""])){margin-top:calc(var(--gc-margin, var(--theme-margin, 5px)) + var(--gc-caption-font-size, var(--theme-caption-font-size, 14px)) + 8px)}:host([caption]:not([caption=""])),:host([info-text]:not([info-text=""])){overflow:visible;position:relative}:host([caption=""][info-text]:not([info-text=""])),:host([info-text]:not([info-text=""]):not([caption])){margin-right:calc(var(--gc-margin, var(--theme-margin, 5px)) + 22px)}#elementWrapper{box-sizing:content-box;height:100%;width:100%;display:flex;align-items:center;min-height:inherit;max-height:inherit;min-width:inherit;max-width:inherit}.root-container{position:relative;display:flex;flex-direction:column;width:100%;height:100%;min-height:inherit;max-height:inherit;min-width:inherit;max-width:inherit}.root-container .header-container.top{top:var(--gc-header-container-top, calc(0px - 8px - var(--gc-caption-font-size, var(--theme-caption-font-size, 14px))));flex-direction:row}.root-container .header-container.side{right:-22px;flex-direction:column;height:inherit}.root-container .header-container{position:absolute;display:flex;align-items:center}.root-container .header-container .icon,.root-container .header-container gc-widget-icon{cursor:default;margin:auto;height:18px;width:18px;display:block;--gc-color:var(--gc-caption-info-color, var(--theme-caption-info-color, #98999b))}.root-container .header-container .caption{flex:1;cursor:default;white-space:nowrap;margin-right:2px;font-weight:var(--gc-caption-font-weight, var(--theme-caption-font-weight, 400));font-size:var(--gc-caption-font-size, var(--theme-caption-font-size, 14px));color:var(--gc-caption-font-color, var(--theme-caption-font-color, #999999))}.invisible{visibility:hidden}:host{width:600px;height:800px;margin:0}#elementWrapper{align-items:stretch}#ccxml_tabs{flex:1;height:auto}#ccxml_tabs .column{display:inline-flex;flex-direction:column;align-items:stretch}#ccxml_tabs .column gc-widget-select,#ccxml_tabs .column gc-widget-input-filter{width:auto}#ccxml_tabs .column gc-widget-property-grid{--gc-caption-text-align:left}#ccxml_tabs .column #boardsContainer{min-height:118px}#ccxml_tabs .column #cpus{align-self:start}#ccxml_tabs .column .caption{white-space:nowrap;font-weight:var(--gc-caption-font-weight, var(--theme-caption-font-weight, 400));font-size:var(--gc-caption-font-size, var(--theme-caption-font-size, 14px));color:var(--gc-caption-font-color, var(--theme-caption-font-color, #999999))}#ccxml_tabs .column .caption.none{visibility:hidden}#ccxml_tabs .column #notes{border:1px solid var(--gc-border-color, var(--theme-border-color, #e5e5e5));margin:var(--gc-margin, var(--theme-margin, 5px));padding:var(--gc-margin, var(--theme-margin, 5px));white-space:wrap;min-height:50px;user-select:text}#ccxml_tabs .row{display:flex;height:100%}#ccxml_tabs .row.stretch{overflow-x:auto}#ccxml_tabs .noscroll{overflow:hidden}#ccxml_tabs .stretch{flex:1}#ccxml_tabs #buttonContainer{margin-top:var(--gc-margin, var(--theme-margin, 5px));margin-bottom:var(--gc-margin, var(--theme-margin, 5px));overflow-y:auto}#ccxml_tabs #buttonContainer>:first-child{margin-top:0px}#ccxml_tabs #buttonContainer>:last-child{margin-bottom:0px}#ccxml_tabs div.fill{flex:1;position:relative}#ccxml_tabs div.fill>:first-child{position:absolute;left:0;top:0;right:0;bottom:0}#ccxml_tabs gc-widget-grid-data-column{--gc-heading-text-align:start}#ccxml_tabs gc-widget-grid-data-column#deviceColumn{--gc-column-width:minmax(220px, 1fr)}#ccxml_tabs gc-widget-grid-data-column.center{--gc-text-align:center}#ccxml_tabs gc-widget-grid-tree-column{--gc-column-width:1fr}#ccxml_tabs #properties{border:2px solid var(--gc-border-color, var(--theme-border-color, #e5e5e5));overflow:auto;margin:var(--gc-margin, var(--theme-margin, 5px))}#ccxml_tabs #properties gc-widget-property-grid{--gc-caption-text-align:top}#ccxml_tabs .button{width:150px}div#debuggables{margin:var(--gc-margin, var(--theme-margin, 5px));margin-bottom:0px}div#debuggables .progress{margin:0 2px 0 2px;--gc-progress-size:10px;vertical-align:middle}';let f=class{constructor(i){t(this,i);this.selectedTabIndexChanged=e(this,"selected-tab-index-changed",7);this.undoDescriptionChanged=e(this,"undo-description-changed",7);this.redoDescriptionChanged=e(this,"redo-description-changed",7);this.dirtyStateChanged=e(this,"dirty-state-changed",7);this.cssPropertyChanged=e(this,"css-property-changed",7);this.connections=[];this.devices=new m([],[]);this.initialized=false;this.undoStack=new n;this.configurations=new Map;this.deviceDescriptions=new Map;this.activeConfiguration=u.nullSession;this.filteredConnections=[];this.selectedConnectionByIndex=-1;this.filterDevicesText="";this.deviceDescription="";this.waitingForAdvancedProperties=false;this.tabsPosition="bottom";this.undoDescription="";this.redoDescription="";this.dirtyState=false;this.stopPropagation=t=>{t.stopPropagation()};this.onIndexChanged=t=>{this.selectedTabIndex=t.detail.value;this.selectedTabIndexChanged.emit({value:t.detail.value})};this.onDeviceFilterValueChanged=t=>{this.filterDevicesText=t.detail?.value??""};this.onSelectedConnectionChanged=t=>{const e=t.detail.value;if(this.selectedConnection!==t.detail.value){this.pushOperation(new u.SetConnectionOperation(this,e))}};this.onSelectedDeviceChanged=t=>{if(this.devices?.selectedDevice!==t){this.pushOperation(new u.SetDeviceOperation(this,t))}};this.onDeviceDescriptionChanged=async()=>{this.deviceDescription="";const t=this.deviceGrid?.selectedPath;this.highlightedDevice=t;if(!t||!this.devices){return}if(this.deviceDescriptionPromise?.isPending){try{await this.deviceDescriptionPromise}catch(t){}this.deviceDescriptionPromise=undefined;if(this.deviceGrid?.selectedPath!==t){return}}let e=this.deviceDescriptions.get(t);if(!e){e=this.devices.readDeviceDescription(t);this.deviceDescriptions.set(t,e)}this.deviceDescriptionPromise=e;try{this.deviceDescription=await e}catch(e){this.logger.error(`Problem reading device description: ${e.message||e.toString()}`);this.deviceDescription=`${t} (description not available)`}};this.onAdvanceTreeSelectionChanged=()=>{if(this.activeConfiguration){this.activeConfiguration.selectedPath=this.advancedTreeGrid?.selectedPath;this.ensureDefaultProperties()}};this.onSelectedCpuIndexChanged=t=>{if(this.activeConfiguration){this.activeConfiguration.selectedCpuIndex=t.detail.value;this.refresh()}};this.onCpuPropertyValueChanged=t=>{this.onPropertyValueChanged(0,t,this.activeConfiguration.selectedCpu)};this.onAdvancedPropertyValueChanged=t=>{this.onPropertyValueChanged(1,t,this.activeConfiguration.selectedPath)};this._refresh=0;this.hidden=false}onActiveConfigurationChanged(){this.advancedTreeGrid?.setDataProvider(this.activeConfiguration.root,8,this.activeConfiguration.id)}getConnectionIndexByName(t){return this.connections.findIndex((e=>e.id===t))??-1}get selectedConnection(){if(this.selectedConnectionByIndex<0){return f.DEFAULT_CONNECTION}return this.connections[this.selectedConnectionByIndex]?.id}set selectedConnection(t){this.selectedConnectionByIndex=this.getConnectionIndexByName(t)}get logger(){if(!this._logger){this._logger=new o("gc-widget-ccxml-editor",this.el.id)}return this._logger}onUndoDescriptionChanged(){this.undoDescriptionChanged.emit({value:this.undoStack.undoStack[0]?.toString()??undefined})}onRedoDescriptionChanged(){this.redoDescriptionChanged.emit({value:this.undoStack.redoStack[0]?.toString()??undefined})}onDirtyStateChanged(){if(this.dirtyState!==this.undoStack.dirty){this.undoStack.dirty=this.dirtyState}this.dirtyStateChanged.emit({value:this.undoStack.dirty})}async load(t,e,i=false){try{const s=u.createNew({ccxmlText:t,fileName:e});const o=await s;const[r,c]=o.id.split("/");if(!r){throw new Error("Failed to load .ccxml file.  The contents is missing a connection.")}const a=this.getConnectionIndexByName(r);if(a<0){throw new Error(`Failed to load .ccxml file.  The connection id="${r}" is not a known connection.`)}if(!c){throw new Error("Failed to load .ccxml file.  The contents is missing a device.")}const h=this.devices?.getDeviceByName(c);if(!h){throw new Error(`Failed to load .ccxml file.  The device id="${c}" is not a known board or device.`)}if(!h.connectionIndices.includes(a)){throw new Error(`Failed to load .ccxml file.  The connection id="${r}" is not supported by the ${h.type} id="${c}`)}const l=new u.SetSessionOperation(this,s,{connectionName:r,deviceName:c},o.id);if(i){this.logger.debug(`(load) ${l.toString()}`);l.redo();this.undoStack=new n;this.onUndoStackChanged()}else{this.pushOperation(l)}}catch(t){this.logger.error(t.message||t.toString());throw t}}async save(){this.dirtyState=false;return this.activeConfiguration.ccxmlText}async undo(){if(this.undoStack.canUndo){const t=this.undoStack.popUndoStack();this.logger.debug(`(undo) ${t.toString()}`);t.undo();this.onUndoStackChanged()}}async paste(t){if(t){await this.load(t)}}async copy(){return this.activeConfiguration.ccxmlText}async redo(){if(this.undoStack.canRedo){const t=this.undoStack.popRedoStack();this.logger.debug(`(redo) ${t.toString()}`);t.redo();this.onUndoStackChanged()}}async getTextFn(){return()=>this.activeConfiguration.ccxmlText}onUndoStackChanged(){this.undoDescription=this.undoStack.undoStack[0]?.toString()??"";this.redoDescription=this.undoStack.redoStack[0]?.toString()??"";this.dirtyState=this.undoStack.dirty}pushOperation(t){this.logger.debug(`(push) ${t.toString()}`);this.undoStack.pushOperation(t);t.redo();this.onUndoStackChanged()}async ensureDefaultProperties(){try{this.waitingForAdvancedProperties=true;await this.activeConfiguration.ensureBuiltInProperties()}finally{this.waitingForAdvancedProperties=false}}onPropertyValueChanged(t,e,i){if(this.activeConfiguration&&e.detail.value!=e.detail.oldValue){this.pushOperation(new u.setPropertyOperation(this,t,i,e.detail.id??e.detail.caption,e.detail.value,e.detail.oldValue))}}doFilterConnections(t,e){const i=e&&this.devices?this.devices.getDeviceByName(e):undefined;let s;if(i){s=i.connectionIndices.map((e=>t[e].id))}else{s=t.map((t=>t.id))}s=s.filter((t=>t!=="Serial Connection"));s=s.sort();s.unshift(f.DEFAULT_CONNECTION);return s}connectedCallback(){this.initialized=false;this.devices=undefined;const t=r.getService(c);t.getConfigInfo().then((t=>{this.devices=new m(t.devices,t.boards,this.onSelectedDeviceChanged);this.connections=t.connections;this.filteredConnections=this.doFilterConnections(this.connections)}))}render(){const t=this.devices?.selectedDevice;let e=this.filteredConnections.join("|");if(e.startsWith(f.DEFAULT_CONNECTION+"|")){const i=`recommended (${this.getRecommendedConnectionOption(t)})`;e=i+e.substring(f.DEFAULT_CONNECTION.length)}const s=this.filterDevicesText||this.selectedConnectionByIndex>=0?`${this.selectedConnectionByIndex};${this.filterDevicesText}`:"";const o=this.activeConfiguration.cpuList;const n=this.activeConfiguration?.selectedCpuIndex;const r=this.activeConfiguration.properties;const c=this.fileSeparator||(d.OS==="win"?"\\":"/");const h=this.activeConfiguration.getValues(r,c);const l=this.waitingForAdvancedProperties?[]:this.activeConfiguration.advancedProperties;const g=this.activeConfiguration.getValues(l,c);const u=this.activeConfiguration.selectedPropertiesCaption;return a.doRender(i("gc-widget-tab-container",{id:"ccxml_tabs",position:this.tabsPosition,index:this.selectedTabIndex,initialIndex:-1,"onIndex-changed":this.onIndexChanged},i("gc-widget-tab-panel",{id:"basic_page",label:"Basic",iconName:"round:action:home",hasHeading:true,tooltip:"General Setup"},i("div",{class:"row stretch"},i("div",{class:"column stretch"},i("gc-widget-select",{id:"connection",labels:e,values:this.filteredConnections,selectedValue:this.selectedConnection,"onSelected-value-changed":this.onSelectedConnectionChanged,caption:"Connection",maxVisibleItems:15}),i("gc-widget-input-filter",{id:"filter",hasClearIcon:true,hasSearchIcon:true,"onValue-changed":this.onDeviceFilterValueChanged,"onClear-icon-clicked":this.onDeviceFilterValueChanged,intermediateChanges:true,caption:"Board or Device",value:this.filterDevicesText,onKeyDown:this.stopPropagation}),i("div",{class:"fill",id:"boardsContainer"},i("gc-widget-grid",{part:"grid",id:"boards",virtual:true,"smooth-scrolling":true,ref:t=>this.deviceGrid=t,filterText:s,selectedPath:this.highlightedDevice,"onSelected-path-changed":this.onDeviceDescriptionChanged},i("gc-widget-grid-data-column",{class:"center",id:"deviceCheckbox",name:"selected",heading:"Enable",format:"boolean",hideMinimizeAction:true}),i("gc-widget-grid-data-column",{id:"deviceColumn",name:"device",readonly:true,heading:"Boards or Devices",hideMinimizeAction:true}))),i("gc-widget-label",{class:"caption",label:"Notes"}),i("div",{id:"notes",innerHTML:this.deviceDescription.split("\n").join("<br/>")??""})),i("div",{class:"column stretch"},i("div",{id:"debuggables",class:"caption"},"Debuggable CPUs (",this.busyPromise?.isPending?i("gc-widget-progress-spinner",{class:"progress"}):o.length,")"),i("gc-widget-select",{id:"cpus",labels:o,selectedIndex:n,maxVisibleItems:10,"onSelected-index-changed":this.onSelectedCpuIndexChanged,onKeyDown:this.stopPropagation}),i("gc-widget-property-grid",{autoCapitalizeCaption:true,caption:"CPU Properties",propertyInfo:r,values:h,"onProperty-value-changed":this.onCpuPropertyValueChanged,onKeyDown:this.stopPropagation})))),i("gc-widget-tab-panel",{id:"advanced_page",label:"Advanced",iconName:"round:action:settings",hasHeading:true,tooltip:"Advanced Setup"},i("div",{class:"row stretch noscroll"},i("div",{class:"column stretch"},i("gc-widget-label",{label:"All Connections",class:"caption"}),i("div",{class:"fill"},i("gc-widget-grid",{part:"grid",id:"advanced_tree",hideHeading:true,class:"stretch",ref:t=>this.advancedTreeGrid=t,"onSelected-path-changed":this.onAdvanceTreeSelectionChanged,selectedPath:this.activeConfiguration?.selectedPath},i("gc-widget-grid-tree-column",{name:"tree",hideMinimizeAction:true,heading:"All Connections"})))),i("div",{class:"column"},i("gc-widget-label",{label:"Actions",class:"caption invisible"}),i("div",{class:"column",id:"buttonContainer"},i("gc-widget-button",{id:"new",buttonType:"secondary",label:"New Connection ...",class:"button",disabled:true}),i("gc-widget-button",{id:"add",buttonType:"secondary",label:"Add Device ...",class:"button",disabled:true}),i("gc-widget-button",{id:"delete",buttonType:"secondary",label:"Remove",class:"button",disabled:true}),i("gc-widget-button",{id:"up",buttonType:"secondary",label:"Up",class:"button",disabled:true}),i("gc-widget-button",{id:"down",buttonType:"secondary",label:"Down",class:"button",disabled:true}))),i("div",{class:"column stretch"},i("gc-widget-label",{id:"advanced_properties_caption",label:`${u} Properties`,class:`caption${u?"":" none"}`}),i("div",{id:"properties",class:"column stretch"},i("gc-widget-property-grid",{id:"propertyGrid",autoCapitalizeCaption:true,propertyInfo:l,values:g,"onProperty-value-changed":this.onAdvancedPropertyValueChanged})))))))}componentDidRender(){if(!this.initialized&&this.devices){this.deviceGrid?.setDataProvider(this.devices);this.deviceGrid?.setFilterMethod(m.filterByFunction);this.initialized=true}}getRecommendedConnectionOption(t){const e=(t&&this.devices?.getDeviceByName(t)?.defaultConnectionIndex)??-1;if(e>=0){return this.connections[e].id}let i=0;let s="";this.filteredConnections.forEach((e=>{if(i===0&&e!==f.DEFAULT_CONNECTION){s=e;i=1}if(i<2&&e.indexOf("Texas Instruments")>=0){s=e;i+=2}if(i<4&&e.indexOf("XDS110 USB")>=0){s=e;i=+4}if(t&&i<8&&e.indexOf("MSP430 USB1")>=0&&t.indexOf("MSP430")>=0){s=e;i=+8}}));return s}setProperty(t,e,i,s){try{if(this.activeConfiguration){this.selectedTabIndex=t;this.activeConfiguration.setSelection(t,e);this.activeConfiguration.setValue(t,i,s);this.refresh()}}catch(t){this.logger.error(`Problem setting property for ${i}=${s} ${e}\n${t.message||t.toString()}`)}}swapConfiguration(t,e){const i=this.configurations.get(t);this.configurations.set(t,e);return i}getSelection(){return{connectionName:this.selectedConnection,deviceName:this.devices?.selectedDevice}}setSelection(t){this.selectedConnection=t.connectionName;const e=this.devices?.selectedDevice;if(t.deviceName!==e&&this.devices){if(this.devices.selectedDevice!==t.deviceName){this.devices.selectedDevice=t.deviceName;this.highlightedDevice=t.deviceName;this.deviceGrid?.refresh();if(t.deviceName&&this.filterDevicesText&&!m.isDeviceFiltered(t.deviceName,this.filterDevicesText)){this.filterDevicesText=""}}this.filteredConnections=this.doFilterConnections(this.connections,t.deviceName)}this.setActiveConfiguration()}async setActiveConfiguration(){const t=this.devices?.selectedDevice;let e=this.selectedConnection;if(e===f.DEFAULT_CONNECTION){e=this.getRecommendedConnectionOption(t)}if(this.busyPromise&&!this.busyPromise.isFulfilled){this.logger.debug("cancelling creating a new configuration");this.busyPromise.cancelled=true}this.busyPromise=undefined;this.activeConfiguration=u.nullSession;if(!t||!e){return}const i=`${e}/${t}`;let s=this.configurations.get(i);if(!s||s.cancelled){this.logger.debug(`creating a new configuration for ${i}`);s=u.createNew({connectionName:e,deviceName:t});this.configurations.set(i,s)}this.busyPromise=s;try{const t=await s;this.logger.debug(`setting active configuration for ${i}`);this.activeConfiguration=t}catch(t){if(!s.cancelled){this.logger.error(`Problem creating configuration for ${i}\n${t.message||t.toString()}`)}}}async setCSSProperty(t,e){e=e.trim();if(await this.getCSSProperty(t)!==e){this.el.style.setProperty(t,e);this.cssPropertyChanged.emit({name:t,value:e})}}async getCSSProperty(t){return getComputedStyle(this.el).getPropertyValue(t).trim()}async refresh(){this._refresh++}get el(){return s(this)}static get watchers(){return{activeConfiguration:["onActiveConfigurationChanged"],undoDescription:["onUndoDescriptionChanged"],redoDescription:["onRedoDescriptionChanged"],dirtyState:["onDirtyStateChanged"]}}};f.DEFAULT_CONNECTION="default";f.style=p;export{f as gc_widget_ccxml_editor};
//# sourceMappingURL=p-903d8753.entry.js.map