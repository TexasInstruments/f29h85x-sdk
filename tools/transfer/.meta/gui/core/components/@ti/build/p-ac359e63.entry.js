import{r as e,g as r}from"./p-84e39b72.js";import{TargetProgramLoader as t}from"../gc-target-program-loader/lib/TargetProgramLoader";import{c as i}from"./p-0c6e1a4c.js";import{ServicesRegistry as a}from"../gc-core-services/lib/ServicesRegistry";import{targetConfigServiceType as s}from"../gc-service-target-config/lib/TargetConfigService";import{createPropertyAutoFill as o}from"../gc-core-assets/lib/GcDesigner";import{ActionRegistry as c}from"../gc-widget-menu/lib/ActionRegistry";import{GcMessageDialog as n}from"../gc-widget-message-dialog/lib/GcMessageDialog";import{connectionManager as g}from"../gc-target-connection-manager/lib/ConnectionManager";import{GcUtils as m}from"../gc-core-assets/lib/GcUtils";const d=a.getService(s);let l=class{constructor(r){e(this,r);this.impl=undefined;this.propertyAutoFill=undefined;this.autoProgram=false;this.optional=false;this.sram=false}async loadProgram(){const e=this.programOrBinPath;if(!e){return await n.error(`gc-target-program-loader id=${this.el.id} is missing a program or binary path property`)}const r=document.querySelector('gc-widget-menuaction[action-id="cmd_open_program_loader_dialog"]');const t=r?.label.split("...")[0].trim()??"Load Program";const i=t.split(" ")[0];const a=e?.lastIndexOf("/")??-1;const s=`${i}ing ${e.substring(a+1)} for ${this.impl.toString()}`;if(await n.prompt(t,`${s}?`,"image:flash_on")==="confirm"){const{progress:e,result:r}=await n.progress(t,s,"image:flash_on",true,0,100,true);let i=false;const a=new class r{assertStillConnecting(){if(i){throw Error("Operation aborted by user")}}addProgressMessage(e){g.addProgressMessage(e)}addErrorMessage(e){g.addProgressMessage(e)}addWarningMessage(e){g.addProgressMessage(e)}addDebugMessage(r){g.addProgressMessage(r);e.setMessage(r)}};r.then((e=>{i=e==="dismiss"}));try{await g.loadProgram(this.impl,a,e.setValue);e.setValue(100)}catch(r){e.cancel();if(!i){n.error(`${t} Failed: ${r.message||r.toString()}`)}}}}connectedCallback(){const e=i(this.el);this.impl=new t(e);if(this.el.id){c.registerAction(`open_program_loader_dialog_${this.el.id}`,{run:()=>{this.loadProgram()},isEnabled(){return!m.isInDesigner}})}this.propertyAutoFill=o(this.el);this.propertyAutoFill.register("deviceName",(async()=>(await d.getBoardsAndDevices()).map((e=>e.id)))).register("connectionName",(async()=>(await d.getConnections(e["deviceName"])).map((e=>e.id))))}disconnectedCallback(){this.propertyAutoFill.unregister("deviceName").unregister("connectionName")}get el(){return r(this)}};export{l as gc_target_program_loader};
//# sourceMappingURL=p-ac359e63.entry.js.map