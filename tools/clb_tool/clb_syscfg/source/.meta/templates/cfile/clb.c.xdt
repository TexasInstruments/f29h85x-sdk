%let Common    = system.getScript("/clb_syscfg/source/Common.js");
%let mod       = system.modules['/clb_syscfg/source/TILE'];
%
%%{
function parseMultiLine(description)
{
    var outputComment = "";
    var lineLength = 74;
    var lineIndex = 0;

    for(var i = 0; i < description.length; i++)
    {
        if(description[i] == '\n')
        {
            outputComment = outputComment.concat('\n\t\t');
            lineIndex = 0;
        }
        else if((lineIndex != 0) && ((lineIndex % lineLength) == 0))
        {
            if(((description.charCodeAt(i) > 64) && (description.charCodeAt(i) < 91)) || ((description.charCodeAt(i) > 96) && (description.charCodeAt(i) < 123)))
            {
                outputComment = outputComment.concat('-');
            }
            outputComment = outputComment.concat('\n\t\t');
            outputComment = outputComment.concat(description[i]);

            lineIndex = 0;
        }
        else
        {
            outputComment = outputComment.concat(description[i]);
            lineIndex++;
        }
    }
    return outputComment;
}
%%}
%if(mod) {
%let instances = mod.$instances;
%let templ     = system.getTemplate;
/*
 *  ======== clb.c ========
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 */

#include "driverlib.h"
#include "device.h"
#include "clb_config.h"
#include "clb.h"

% for (let i = 0; i < instances.length; i++) { // for each TILE instance
%     let inst = instances[i];
%     let name = inst.$name;

const uint32_t `name`_HLC_initFIFOData[4] = {`name`_HLC_FIFO0_INIT, `name`_HLC_FIFO1_INIT, `name`_HLC_FIFO2_INIT, `name`_HLC_FIFO3_INIT};

uint16_t `name`HLCInstr[CLB_NUM_HLC_INSTR + 1] =
{
    `name`_HLCINSTR_0,
    `name`_HLCINSTR_1,
    `name`_HLCINSTR_2,
    `name`_HLCINSTR_3,
    `name`_HLCINSTR_4,
    `name`_HLCINSTR_5,
    `name`_HLCINSTR_6,
    `name`_HLCINSTR_7,
    `name`_HLCINSTR_8,
    `name`_HLCINSTR_9,
    `name`_HLCINSTR_10,
    `name`_HLCINSTR_11,
    `name`_HLCINSTR_12,
    `name`_HLCINSTR_13,
    `name`_HLCINSTR_14,
    `name`_HLCINSTR_15,
    `name`_HLCINSTR_16,
    `name`_HLCINSTR_17,
    `name`_HLCINSTR_18,
    `name`_HLCINSTR_19,
    `name`_HLCINSTR_20,
    `name`_HLCINSTR_21,
    `name`_HLCINSTR_22,
    `name`_HLCINSTR_23,
    `name`_HLCINSTR_24,
    `name`_HLCINSTR_25,
    `name`_HLCINSTR_26,
    `name`_HLCINSTR_27,
    `name`_HLCINSTR_28,
    `name`_HLCINSTR_29,
    `name`_HLCINSTR_30,
    `name`_HLCINSTR_31
};

% }

% for (let i = 0; i < instances.length; i++) { // for each TILE instance
%     let inst = instances[i];
%     let name = inst.$name;

void init`name`(uint32_t base)
{
    uint16_t i;
% if (Common.isType2()) {
    //
    //  Pipeline Mode
    //
    % if (inst.pipeline_mode) {
    CLB_enablePipelineMode(base);
    % } else {
    CLB_disablePipelineMode(base);
    % }
% }
    //
    //  Output LUT
    //
    %if(!(inst.OUTLUT_0.eqn === ""))
    %{
    //
    //  Equation for Output Look-Up Table Block 0 for `name`: `inst.OUTLUT_0.eqn`
    //
    %}
    %if(!(inst.OUTLUT_0.outlutDescription === ""))
    %{
    //  User Description for Output Look-Up Table 0 for `name`
    /*
        `parseMultiLine(inst.OUTLUT_0.outlutDescription)`
    */
    //
    %}
    CLB_configOutputLUT(base, CLB_OUT0, `name`_CFG_OUTLUT_0);

    %if(!(inst.OUTLUT_1.eqn === ""))
    %{
    //
    //  Equation for Output Look-Up Table Block 1 for `name`: `inst.OUTLUT_1.eqn`
    //
    %}
    %if(!(inst.OUTLUT_1.outlutDescription === ""))
    %{
    //
    //  User Description for Output Look-Up Table 1 for `name`
    /*
        `parseMultiLine(inst.OUTLUT_1.outlutDescription)`
    */
    //
    %}
    CLB_configOutputLUT(base, CLB_OUT1, `name`_CFG_OUTLUT_1);

    %if(!(inst.OUTLUT_2.eqn === ""))
    %{
    //
    //  Equation for Output Look-Up Table Block 2 for `name`: `inst.OUTLUT_2.eqn`
    //
    %}
    %if(!(inst.OUTLUT_2.outlutDescription === ""))
    %{
    //
    //  User Description for Output Look-Up Table 2 for `name`
    /*
        `parseMultiLine(inst.OUTLUT_2.outlutDescription)`
    */
    //
    %}
    CLB_configOutputLUT(base, CLB_OUT2, `name`_CFG_OUTLUT_2);

    %if(!(inst.OUTLUT_3.eqn === ""))
    %{
    //
    //  Equation for Output Look-Up Table Block 3 for `name`: `inst.OUTLUT_3.eqn`
    //
    %}
    %if(!(inst.OUTLUT_3.outlutDescription === ""))
    %{
    //
    //  User Description for Output Look-Up Table 3 for `name`
    /*
        `parseMultiLine(inst.OUTLUT_3.outlutDescription)`
    */
    //
    %}
    CLB_configOutputLUT(base, CLB_OUT3, `name`_CFG_OUTLUT_3);

    %if(!(inst.OUTLUT_4.eqn === ""))
    %{
    //
    //  Equation for Output Look-Up Table Block 4 for `name`: `inst.OUTLUT_4.eqn`
    //
    %}
    %if(!(inst.OUTLUT_4.outlutDescription === ""))
    %{
    //
    //  User Description for Output Look-Up Table 4 for `name`
    /*
        `parseMultiLine(inst.OUTLUT_4.outlutDescription)`
    */
    //
    %}
    CLB_configOutputLUT(base, CLB_OUT4, `name`_CFG_OUTLUT_4);

    %if(!(inst.OUTLUT_5.eqn === ""))
    %{
    //
    //  Equation for Output Look-Up Table Block 5 for `name`: `inst.OUTLUT_5.eqn`
    //
    %}
    %if(!(inst.OUTLUT_5.outlutDescription === ""))
    %{
    //
    //  User Description for Output Look-Up Table 5 for `name`
    /*
        `parseMultiLine(inst.OUTLUT_5.outlutDescription)`
    */
    //
    %}
    CLB_configOutputLUT(base, CLB_OUT5, `name`_CFG_OUTLUT_5);
    
    %if(!(inst.OUTLUT_6.eqn === ""))
    %{
    //
    //  Equation for Output Look-Up Table Block 6 for `name`: `inst.OUTLUT_6.eqn`
    //
    %}
    %if(!(inst.OUTLUT_6.outlutDescription === ""))
    %{
    //
    //  User Description for Output Look-Up Table 6 for `name`
    /*
        `parseMultiLine(inst.OUTLUT_6.outlutDescription)`
    */
    //
    %}
    CLB_configOutputLUT(base, CLB_OUT6, `name`_CFG_OUTLUT_6);

    %if(!(inst.OUTLUT_7.eqn === ""))
    %{
    //
    //  Equation for Output Look-Up Table Block 7 for `name`: `inst.OUTLUT_7.eqn`
    //
    %}
    %if(!(inst.OUTLUT_7.outlutDescription === ""))
    %{
    //
    //  User Description for Output Look-Up Table 7 for `name`
    /*
        `parseMultiLine(inst.OUTLUT_7.outlutDescription)`
    */
    //
    %}
    CLB_configOutputLUT(base, CLB_OUT7, `name`_CFG_OUTLUT_7);

% if (Common.isType1_Type2()) {
    //
    //  AOC
    //
    %if(!(inst.AOC_0.aocDescription === ""))
    %{
    //
    //  User Description for Asynchronous Output Conditioning Block 0 for `name`
    /*
        `parseMultiLine(inst.AOC_0.aocDescription)`
    */
    //
    %}
    CLB_configAOC(base, CLB_AOC0, `name`_OUTPUT_COND_CTR_0);
    %if(!(inst.AOC_1.aocDescription === ""))
    %{
    //
    //  User Description for Asynchronous Output Conditioning Block 1 for `name`
    /*
        `parseMultiLine(inst.AOC_1.aocDescription)`
    */
    //
    %}
    CLB_configAOC(base, CLB_AOC1, `name`_OUTPUT_COND_CTR_1);
    %if(!(inst.AOC_2.aocDescription === ""))
    %{
    //
    //  User Description for Asynchronous Output Conditioning Block 2 for `name`
    /*
        `parseMultiLine(inst.AOC_2.aocDescription)`
    */
    //
    %}
    CLB_configAOC(base, CLB_AOC2, `name`_OUTPUT_COND_CTR_2);
    %if(!(inst.AOC_3.aocDescription === ""))
    %{
    //
    //  User Description for Asynchronous Output Conditioning Block 3 for `name`
    /*
        `parseMultiLine(inst.AOC_3.aocDescription)`
    */
    //
    %}
    CLB_configAOC(base, CLB_AOC3, `name`_OUTPUT_COND_CTR_3);
    %if(!(inst.AOC_4.aocDescription === ""))
    %{
    //
    //  User Description for Asynchronous Output Conditioning Block 4 for `name`
    /*
        `parseMultiLine(inst.AOC_4.aocDescription)`
    */
    //
    %}
    CLB_configAOC(base, CLB_AOC4, `name`_OUTPUT_COND_CTR_4);
    %if(!(inst.AOC_5.aocDescription === ""))
    %{
    //
    //  User Description for Asynchronous Output Conditioning Block 5 for `name`
    /*
        `parseMultiLine(inst.AOC_5.aocDescription)`
    */
    //
    %}
    CLB_configAOC(base, CLB_AOC5, `name`_OUTPUT_COND_CTR_5);
    %if(!(inst.AOC_6.aocDescription === ""))
    %{
    //
    //  User Description for Asynchronous Output Conditioning Block 6 for `name`
    /*
        `parseMultiLine(inst.AOC_6.aocDescription)`
    */
    //
    %}
    CLB_configAOC(base, CLB_AOC6, `name`_OUTPUT_COND_CTR_6);
    %if(!(inst.AOC_7.aocDescription === ""))
    %{
    //
    //  User Description for Asynchronous Output Conditioning Block 7 for `name`
    /*
        `parseMultiLine(inst.AOC_7.aocDescription)`
    */
    //
    %}
    CLB_configAOC(base, CLB_AOC7, `name`_OUTPUT_COND_CTR_7);

% }
    //
    // LUT 0 - 2 are configured as macros in clb_config.h; these macros are used in
    // CLB_selectLUT4Inputs and CLB_configLUT4Function
    //
    %if(!(inst.LUT_0.eqn === ""))
    %{
    //
    //  Equation for Look-Up Table Block 0 for `name`: `inst.LUT_0.eqn`
    %}
    %if(!(inst.LUT_0.lutDescription === ""))
    %{
    //  User Description for Look-Up Table Block 0 for `name`
    /*
        `parseMultiLine(inst.LUT_0.lutDescription)`
    */
    %}
    %if(!(inst.LUT_1.eqn === ""))
    %{
    //
    //  Equation for Look-Up Table Block 1 for `name`: `inst.LUT_1.eqn`
    %}
    %if(!(inst.LUT_1.lutDescription === ""))
    %{
    //  User Description for Look-Up Table Block 1 for `name`
    /*
        `parseMultiLine(inst.LUT_1.lutDescription)`
    */
    %}
    %if(!(inst.LUT_2.eqn === ""))
    %{
    //
    //  Equation for Look-Up Table Block 2 for `name`: `inst.LUT_2.eqn`
    %}
    %if(!(inst.LUT_2.lutDescription === ""))
    %{
    //  User Description for Look-Up Table Block 2 for `name`
    /*
        `parseMultiLine(inst.LUT_2.lutDescription)`
    */
    %}

    //
    //  LUT Configuration
    //
    CLB_selectLUT4Inputs(base, `name`_CFG_LUT4_IN0, `name`_CFG_LUT4_IN1, `name`_CFG_LUT4_IN2, `name`_CFG_LUT4_IN3);
    CLB_configLUT4Function(base, `name`_CFG_LUT4_FN10, `name`_CFG_LUT4_FN2);

    //
    // FSM 0 - 2 are configured in <file>
    //
    %if(!(inst.FSM_0.eqn_out === ""))
    %{
    //
    //  Output equation for Finite State Machine 0 for `name`: `inst.FSM_0.eqn_out`
    %}
    %if(!(inst.FSM_0.eqn_s0 === ""))
    %{
    //  State 0 output equation for Finite State Machine 0 for `name`: `inst.FSM_0.eqn_s0`
    %}
    %if(!(inst.FSM_0.eqn_s1 === ""))
    %{
    //  State 1 output equation for Finite State Machine 0 for `name`: `inst.FSM_0.eqn_s1`
    //
    %}
    %if(!(inst.FSM_0.fsmDescription === ""))
    %{
    //  User Description for Finite State Machine 0 for `name`
    /*
        `parseMultiLine(inst.FSM_0.fsmDescription)`
    */
    %}
    %if(!(inst.FSM_1.eqn_out === ""))
    %{
    //
    //  Output equation for Finite State Machine 1 for `name`: `inst.FSM_1.eqn_out`
    %}
    %if(!(inst.FSM_1.eqn_s0 === ""))
    %{
    //  State 0 output equation for Finite State Machine 1 for `name`: `inst.FSM_1.eqn_s0`
    %}
    %if(!(inst.FSM_1.eqn_s1 === ""))
    %{
    //  State 1 output equation for Finite State Machine 1 for `name`: `inst.FSM_1.eqn_s1`
    //
    %}
    %if(!(inst.FSM_1.fsmDescription === ""))
    %{
    //  User Description for Finite State Machine 1 for `name`
    /*
        `parseMultiLine(inst.FSM_1.fsmDescription)`
    */
    %}
    %if(!(inst.FSM_2.eqn_out === ""))
    %{
    //
    //  Output equation for Finite State Machine 2 for `name`: `inst.FSM_2.eqn_out`
    %}
    %if(!(inst.FSM_2.eqn_s0 === ""))
    %{
    //  State 0 output equation for Finite State Machine 2 for `name`: `inst.FSM_2.eqn_s0`
    %}
    %if(!(inst.FSM_2.eqn_s1 === ""))
    %{
    //  State 1 output equation for Finite State Machine 2 for `name`: `inst.FSM_2.eqn_s1`
    //
    %}
    %if(!(inst.FSM_2.fsmDescription === ""))
    %{
    //  User Description for Finite State Machine 2 for `name`
    /*
        `parseMultiLine(inst.FSM_2.fsmDescription)`
    */
    %}

    //
    //  FSM
    //
    CLB_selectFSMInputs(base, `name`_CFG_FSM_EXT_IN0, `name`_CFG_FSM_EXT_IN1, `name`_CFG_FSM_EXTRA_IN0, `name`_CFG_FSM_EXTRA_IN1);
    CLB_configFSMNextState(base, `name`_CFG_FSM_NEXT_STATE_0, `name`_CFG_FSM_NEXT_STATE_1, `name`_CFG_FSM_NEXT_STATE_2);
    CLB_configFSMLUTFunction(base, `name`_CFG_FSM_LUT_FN10, `name`_CFG_FSM_LUT_FN2);

    //
    // Counter 0 - 2 are configured in <file>
    //
    %if(!(inst.COUNTER_0.counterDescription === ""))
    %{
    //  User Description for Counter 0 for `name`
    /*
        `parseMultiLine(inst.COUNTER_0.counterDescription)`
    */
    %}
    %if(!(inst.COUNTER_1.counterDescription === ""))
    %{
    //  User Description for Counter 1 for `name`
    /*
        `parseMultiLine(inst.COUNTER_1.counterDescription)`
    */
    %}
    %if(!(inst.COUNTER_2.counterDescription === ""))
    %{
    //  User Description for Counter 2 for `name`
    /*
        `parseMultiLine(inst.COUNTER_2.counterDescription)`
    */
    %}

    //
    //  Counters
    //
    CLB_selectCounterInputs(base, `name`_CFG_COUNTER_RESET, `name`_CFG_COUNTER_EVENT, `name`_CFG_COUNTER_MODE_0, `name`_CFG_COUNTER_MODE_1);
    CLB_configMiscCtrlModes(base, `name`_CFG_MISC_CONTROL);
    CLB_configCounterLoadMatch(base, CLB_CTR0, `name`_COUNTER_0_LOAD_VAL, `name`_COUNTER_0_MATCH1_VAL, `name`_COUNTER_0_MATCH2_VAL);
    CLB_configCounterLoadMatch(base, CLB_CTR1, `name`_COUNTER_1_LOAD_VAL, `name`_COUNTER_1_MATCH1_VAL, `name`_COUNTER_1_MATCH2_VAL);
    CLB_configCounterLoadMatch(base, CLB_CTR2, `name`_COUNTER_2_LOAD_VAL, `name`_COUNTER_2_MATCH1_VAL, `name`_COUNTER_2_MATCH2_VAL);
% if (Common.isType1_Type2()) {
    CLB_configCounterTapSelects(base, `name`_CFG_TAP_SEL);
% }

    //
    // HLC is configured in <file>
    //
    %if(!(inst.HLC.hlcDescription === ""))
    %{
    //  User Description for the High Level Controller for `name`
    /*
        `parseMultiLine(inst.HLC.hlcDescription)`
    */
    %}

    //
    // HLC
    //
    CLB_configHLCEventSelect(base, `name`_HLC_EVENT_SEL);
    CLB_setHLCRegisters(base, `name`_HLC_R0_INIT, `name`_HLC_R1_INIT, `name`_HLC_R2_INIT, `name`_HLC_R3_INIT);
%if(inst.HLC.FIFO_init_enable)
%{
    CLB_writeFIFOs(base, `name`_HLC_initFIFOData);
%}

    for(i = 0; i <= CLB_NUM_HLC_INSTR; i++)
    {
        CLB_programHLCInstruction(base, i, `name`HLCInstr[i]);
    }
}
% }
%}