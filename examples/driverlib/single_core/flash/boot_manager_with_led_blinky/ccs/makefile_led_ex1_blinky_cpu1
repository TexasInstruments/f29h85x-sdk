export C29SDK_ROOT?=$(abspath ../../../../../../)
include $(C29SDK_ROOT)/imports.mak
comma =,

Target = led_blinky_cpu1
PROFILE?=debug

CFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
LFLAGS := $(LFLAGS_common)
INCLUDES_PATH := $(INCLUDES_common) $(INCLUDES_syscfg)
OBJDIR := $(abspath)

INCLUDES = $(addprefix -I , $(INCLUDES_PATH) $(INCLUDES_PATH_common))
INCLUDE_LIBS = $(addprefix -Wl$(comma)-i, $(dir $(LIBRARIES_common) $(INCLUDES_PATH_common))) $(addprefix -Wl$(comma)-l, $(notdir $(LIBRARIES_common)))
# FILES_PATH = $(FILES_PATH_common) $(C_SRCS_PATH_common)
FILES_PATH = $(FILES_PATH_common)
LIBS = $(LIBRARIES_common) $(LIB)
OBJS = $(CMD_SRCS)
CMD_SRCS = ../f29h85x_flash_lnk_cpu1.cmd

# Files to exclude from the build script
EXCLUDE_FILES := 


# Path to recognize all C-source files exhaustively
FILES_PATH_common = \
	../led_blinky \

# Addintional include path (-i) for the compiler
INCLUDES_PATH_common = \
	${C29SDK_ROOT}/source \
	${C29SDK_ROOT}/source/flash_api/include/FlashAPI \
	${C29SDK_ROOT}/source/flash_api/include/Constants \

# Addintional full library path (-i directory/-l name) for the compiler
LIBRARIES_common = \
	${C29SDK_ROOT}/source/driverlib/ccs/driverlib.lib \
	${C29SDK_ROOT}/source/kernel/nortos/ccs/dpl_nortos.lib \
	${C29SDK_ROOT}/source/security/ccs/security_drivers.lib \
	${C29SDK_ROOT}/source/flash_api/lib/F29H85x_NWFlashAPI_v21.00.00.00.lib 

build-syscfg: ../led_blinky/$(Target).syscfg
	@echo 'Building file: "$<"'
	@echo 'Invoking: SysConfig'
	$(SYSCFG) -s "$(C29SDK_ROOT)/.metadata/sdk.json" --script "../led_blinky/$(Target).syscfg" -o "syscfg" --compiler ticlang
	@echo 'Finished building: "$<"'
	@echo ' '

syscfg/board.c: build-syscfg ../led_blinky/$(Target).syscfg
syscfg/board.h: build-syscfg
syscfg/board.cmd.genlibs: build-syscfg
syscfg/pinmux.csv: build-syscfg

"./syscfg/board.o": ./syscfg/board.c
	@echo 'Building file: "$<"'
	@echo 'Invoking: C2000 Compiler'
	$(COMPILER) $(CFLAGS) $(INCLUDES) -MMD -MP -MF"syscfg/$(basename $(<F)).d" -MT"$(@)" -o"$@" "$<"
	@echo 'Finished building: "$<"'
	@echo ' '

"./syscfg/device.o": ./syscfg/device.c
	@echo 'Building file: "$<"'
	@echo 'Invoking: C2000 Compiler'
	$(COMPILER) $(CFLAGS) $(INCLUDES) -MMD -MP -MF"syscfg/$(basename $(<F)).d" -MT"$(@)" -o"$@" "$<"
	@echo 'Finished building: "$<"'
	@echo ' '

"./syscfg/ti_drivers_config.o": ./syscfg/ti_drivers_config.c
	@echo 'Building file: "$<"'
	@echo 'Invoking: C2000 Compiler'
	$(COMPILER) $(CFLAGS) $(INCLUDES) -MMD -MP -MF"syscfg/$(basename $(<F)).d" -MT"$(@)" -o"$@" "$<"
	@echo 'Finished building: "$<"'
	@echo ' '

"./syscfg/ti_dpl_config.o": ./syscfg/ti_dpl_config.c
	@echo 'Building file: "$<"'
	@echo 'Invoking: C2000 Compiler'
	$(COMPILER) $(CFLAGS) $(INCLUDES) -MMD -MP -MF"syscfg/$(basename $(<F)).d" -MT"$(@)" -o"$@" "$<"
	@echo 'Finished building: "$<"'
	@echo ' '

OBJS  += \
"./syscfg/board.o" \
"./syscfg/device.o" \
"./syscfg/ti_drivers_config.o"  \
"./syscfg/ti_dpl_config.o"      \

syscfg-gui:
	$(SYSCFG_ROOT)/nw/nw $(SYSCFG_ROOT) --product $(C29SDK_ROOT)/.metadata/sdk.json --device F29H85x --context CPU1 --part F29H85x_256ZEX --package 256ZEX --output generated/  ../led_blinky/$(Target).syscfg

C_SRCS += $(foreach dir, $(FILES_PATH), $(wildcard $(dir)/*.c))
C_SRCS := $(filter-out $(EXCLUDE_FILES), $(C_SRCS))
ASM_SRCS = $(foreach dir, $(FILES_PATH), $(wildcard $(dir)/*.asm))
ASM_SRCS := $(filter-out $(EXCLUDE_FILES), $(ASM_SRCS))
vpath %.c $(FILES_PATH)
vpath %.asm $(FILES_PATH)

OBJS += $(notdir $(C_SRCS:%.c=%.o))
OBJS += $(notdir $(ASM_SRCS:%.asm=%.o))

OBJS_CLEAN = $(filter-out $(CMD_SRCS), $(OBJS))

# Build .o file for all .c files
$(OBJDIR)/%.o %.o: %.c
	@echo 'Building file: $<'
	@echo 'Invoking: Compiler'
	$(COMPILER) $(CFLAGS) $(INCLUDES) "$<"
	@echo 'Finished building: $<'
	@echo ' '

# Build .o file for all .asm files
$(OBJDIR)/%.o %.o: %.asm
	@echo 'Building file: $<'
	@echo 'Invoking: Compiler'
	$(COMPILER) $(CFLAGS) $(INCLUDES) "$<"
	@echo 'Finished building: $<'
	@echo ' '

# All Target
all: $(Target).out

$(Target).out: $(OBJS)
	@echo 'Building target: $@'
	@echo 'Invoking: Linker'
	$(LINKER) $(INCLUDE_LIBS) -Wl,-m=$(Target).map $(LFLAGS) -o $@ $(OBJS) $(LIBS) 
	@echo 'Finished building target: $@'
	@echo 'Post build steps'
	@echo 'Creating bin file'
	$(CG_TOOL_OBJCOPY) -O binary $(Target).out ../../firmware.bin
	@echo 'Finished building certificate appended binary: $(Target).bin'
	@echo ' '

clean:
	-$(RM) $(Target).out
	-$(RM) $(Target).map
	-$(RM) $(OBJS_CLEAN)
	-$(RMDIR) syscfg
	-@echo 'Finished clean for $(Target)'
	-@echo ' '

# x509 certificate signed target
X509_PATH ?= $(C29SDK_ROOT)/tools/boot/signing
APPIMAGE_KEY_PATH ?= $(X509_PATH)/c29_custMpk.pem
ENC_KEY_PATH ?= $(X509_PATH)/c29_custMek.key
KD_SALT ?= $(X509_PATH)/kd_salt.txt
SWRV ?= 1
CORE ?= C29
LOADADDR ?= 0x0
ENC ?= y
DEBUG_FLAG ?=
DEBUG_OPTION ?=

image_signed: $(Target)_signed

$(Target)_signed: $(Target).out
	@echo 'Key Path: $(APPIMAGE_KEY_PATH)'
	@echo 'Encryption Key Path: $(ENC_KEY_PATH)'
	@echo 'KD Path: $(KD_SALT)'
	@echo 'Encryption: y'
	python $(X509_PATH)/c29_appimage_x509_cert_gen.py --bin $(Target).out --key $(APPIMAGE_KEY_PATH) --enc y --enckey $(ENC_KEY_PATH) --kd-salt $(KD_SALT) --output $(Target)_signed
	@echo 'Finished building target: $@'
	@echo ' '

rom_hsse: $(Target)_rom_hsse

$(Target)_rom_hsse: $(Target).out
	@echo 'Key Path: $(APPIMAGE_KEY_PATH)'
	@echo 'Encryption Key Path: $(ENC_KEY_PATH)'
	@echo 'KD Path: $(KD_SALT)'
	@echo 'Encryption: y'
	@echo 'Software Revision: $(SWRV)'
	@echo 'Core: $(CORE)'
	@echo 'SBL Run Address: $(LOADADDR)'
	python $(X509_PATH)/c29_rom_image_gen.py --sbl-enc --enc-key $(ENC_KEY_PATH) --image-bin $(Target).out --core $(CORE) --swrv $(SWRV) --loadaddr $(LOADADDR) --sign-key $(APPIMAGE_KEY_PATH) --kd-salt $(KD_SALT) --out-image $@ $(DEBUG_FLAG) $(DEBUG_OPTIONS)
	@echo 'Finished building target: $@'

rom_hsfs: $(Target)_rom_hsfs

$(Target)_rom_hsfs: $(Target).out
	@echo 'Key Path: $(APPIMAGE_KEY_PATH)'
	@echo 'Software Revision: $(SWRV)'
	@echo 'Core: $(CORE)'
	@echo 'SBL Run Address: $(LOADADDR)'
	python $(X509_PATH)/c29_rom_image_gen.py --image-bin $(Target).out --core $(CORE) --swrv $(SWRV) --loadaddr $(LOADADDR) --sign-key $(APPIMAGE_KEY_PATH) --out-image $@ $(DEBUG_FLAG) $(DEBUG_OPTIONS)
	@echo 'Finished building target: $@'